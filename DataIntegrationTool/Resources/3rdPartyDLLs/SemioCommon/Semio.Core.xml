<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Semio.Core</name>
    </assembly>
    <members>
        <member name="T:Semio.Core.Args.DataArrivedEventArgs">
            <summary>
            Data Arrived Event Args
            </summary>
        </member>
        <member name="M:Semio.Core.Args.DataArrivedEventArgs.GetData``1">
            <summary>
            Gets the data.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Args.DataArrivedEventArgs.GetResults``1">
            <summary>
            Gets the results.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Semio.Core.Args.DataArrivedEventArgs.ProcessType">
            <summary>
            Gets or sets the enum.
            </summary>
            <value>The enum.</value>
        </member>
        <member name="P:Semio.Core.Args.DataArrivedEventArgs.RoutedArgs">
            <summary>
            Gets or sets the routed args.
            </summary>
            <value>The routed args.</value>
        </member>
        <member name="P:Semio.Core.Args.DataArrivedEventArgs.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Semio.Core.Args.DataArrivedEventArgs.Results">
            <summary>
            Gets or sets the results.
            </summary>
            <value>The results.</value>
        </member>
        <member name="T:Semio.Core.Args.IArgs">
            <summary>
            Semio argument interface - intended as signature only
            (no properties or methods)
            </summary>
        </member>
        <member name="T:Semio.Core.Args.RoutedArgs">
            <summary>
            Routed Argument - intended for plumbing used for
            arguments travelign through BLL to DAL
            </summary>
        </member>
        <member name="M:Semio.Core.Args.RoutedArgs.GetCacheData``1">
            <summary>
            Gets the results.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Args.RoutedArgs.GetRoutedData``1">
            <summary>
            Gets the routed data.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.URI">
            <summary>
            Gets/Sets a specific URI which can be used to operate
            on by any of the supporting BLL or DAL layers.
            </summary>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.ProcessType">
            <summary>
            Gets or sets the enum representing processing as applicable
            </summary>
            <value>The enum.</value>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.Empty">
            <summary>
            Permits you to easily send a new RoutedArgs, e.g.
            MyProcess(this, RoutedArgs.Empty);
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.IsCacheData">
            <summary>
            Gets a value indicating whether this instance is cache data.
            </summary>
            <value>
            	<c>true</c> if this instance is cache data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.CacheData">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Semio.Core.Args.RoutedArgs.RoutedData">
            <summary>
            Gets or sets the routed data.
            </summary>
            <value>The routed data.</value>
        </member>
        <member name="T:Semio.Core.Attributes.ExtendedDescriptionAttribute">
            <summary>
            Attribute for attaching an extended description to a member.
            </summary>
        </member>
        <member name="F:Semio.Core.Attributes.ExtendedDescriptionAttribute.Description">
            <summary>
            The extended description.
            </summary>
        </member>
        <member name="M:Semio.Core.Attributes.ExtendedDescriptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Attributes.ExtendedDescriptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:Semio.Core.Attributes.ExtendedDescriptionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Attributes.ExtendedDescriptionAttribute"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="T:Semio.Core.BuildTest">
            <summary>
            ignore this.
            </summary>
        </member>
        <member name="P:Semio.Core.BuildTest.ThereIsNothingHere1">
            <summary>
            ignore this.
            </summary>
        </member>
        <member name="T:Semio.Core.Collections.ObservableCollectionWithSuppression`1">
            <summary>
            INotifyCollectionChanged collection allowing adding a group of items at once with only a single change notification.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Semio.Core.Comparers.DecimalComparer.Compare(System.Object,System.Object)">
            <summary>
            Tries to convert 2 objects to decimals and compare them.  Values which 
            can not be converted will be sorted first
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Config.CommandLineArgsManager">
             <summary>
             Command line Argument handler
             </summary>
             <example>
             <code>
                    static void Main(string[] args)
                    {
                        // Fields to set from arguments
                        var runCount = 1;
             
                        // Manager with args and usage info
                        var argsMgr = new CommandLineArgsManager(args,
                                new []
                                {
                                    @"Usage: {exe} [help] [-h] &lt;manifestUrl>",
                                    @"    help or -h      This output",
                                    @"    --runCount &lt;count>",
                                    @"                    Optional, number of top-level runs (defaults to 1)",
                                    null,
                                    @"Examples:",
                                    @"    {exe} http://id-dev-web.quintiles.net/ClinWeb/manifest.manifest"
                                }
                            );
             
                        // Parse args
                        argsMgr.Parse(
                            // Handle flags
                            (chr, argsQueue) =>
                            {
                                switch (chr)
                                {
                                    case 'h':
                                        argsMgr.Usage("Help");
                                        break;
                                    default:
                                        argsMgr.Usage("Unknown flag: " + chr);
                                        break;
                                }
                            },
            
                            // Handle words
                            (wrd, argsQueue) =>
                            {
                                if (argsMgr.AreSame(wrd, "help"))
                                {
                                    argsMgr.Usage("Help");
                                    return;
                                }
                                if (argsMgr.AreSame(wrd, "runCount"))
                                {
                                    runCount = int.Parse(argsQueue.Dequeue());
                                    return;
                                }
                                if (wrd.StartsWith("http"))
                                {
                                    ManifestUrl = wrd;
                                    return;
                                }
            
                                // Default that word misunderstood
                                argsMgr.Usage("Unknown word: " + wrd);
                            }
                            );
             
                        // Santiy check
                        if (string.IsNullOrWhiteSpace(ManifestUrl))
                        {
                            argsMgr.Usage("No ManifestUrl provided");
                        }
            
                        // Start processing
                        for (var i=0; i&lt;runCount; i++) {
                             new DeployAction(ManifestUrl).Go();
                        }
                    }
             </code>
             </example>
        </member>
        <member name="T:Semio.Core.Encryption.SemioEncrypt">
            <summary>
            Code from:
            DavideZordan.net - http://www.davidezordan.net/blog/?p=202 
            Using the AES algorithm to encrypt/decrypt data in an application
            </summary>
        </member>
        <member name="M:Semio.Core.Encryption.SemioEncrypt.GetHashKey(System.String,System.String)">
            <summary>
            Gets the hash key.
            </summary>
            <param name="hashKey">The hash key.</param>
            <param name="salt">The salt.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Encryption.SemioEncrypt.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="dataToEncrypt">The data to encrypt.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Encryption.SemioEncrypt.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="encryptedString">The encrypted string.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.DisposeDelegate.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the DisposeDelegate class.
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.EndOfMonth(System.DateTime)">
            <summary>
            Get the last day of the month for the date
            </summary>
            <param name="date"></param>
            <returns>A new DateTime object set to the Last day of the month for the current date. Leap year is accounted for.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.FirstOfMonth(System.DateTime)">
            <summary>
            Get the first day of the month for the date
            </summary>
            <param name="date"></param>
            <returns>A new DateTime object set to the 1st of the month for the current date.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.IsInSameMonth(System.DateTime,System.DateTime)">
            <summary>
            A flag that indicates whether or not another date is in the same Month and Year as the current date.
            </summary>
            <param name="date"></param>
            <param name="otherDate">The other date to compare Year and Month</param>
            <returns>A True if the year and month are equivilant. A false if they are not.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.IsSameApproximateTime(System.DateTime,System.DateTime,Semio.Core.Extensions.TimePrecision)">
            <summary>
            Determines whether two dates are approximately equal.
            </summary>
            <param name="date"></param>
            <param name="otherDate"></param>
            <param name="precision"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.DateOnOrBefore(System.DateTime,System.DateTime)">
            <summary>
            Determines if this date is on or before the passed in date.
            </summary>
            <param name="date">The date.</param>
            <param name="otherDate">The other date.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.DateEarlierThan(System.DateTime,System.DateTime)">
            <summary>
            Determines if this date is before passed in date.
            </summary>
            <param name="date">The date.</param>
            <param name="otherDate">The other date.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.DateTimeExtensions.DateAfter(System.DateTime,System.DateTime)">
            <summary>
            Determines if this date occurs after passed in date.
            </summary>
            <param name="date">The date.</param>
            <param name="otherDate">The other date.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Scope`1">
            <summary>
            A generic mechanism for invoking begin and end actions around some code block with a using statement.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Semio.Core.Scope`1.#ctor(`0,System.Action{`0},System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Scope`1"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="begin">The begin action.</param>
            <param name="end">The end action.</param>
        </member>
        <member name="M:Semio.Core.Scope`1.Dispose">
            <summary>
            Invokes the end action.
            </summary>
        </member>
        <member name="T:Semio.Core.Scope">
            <summary>
            A mechanism for invoking BeginInit and EndInit around some code block with a using statement.
            </summary>
        </member>
        <member name="T:Semio.Core.Collections.SerializableDictionary`2">
            <summary>
            A xml serializable generic dictionary
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Semio.Core.Collections.SerializableDictionary`2.GetSchema">
            <summary>
            This method is called by the WebServiceUtil.exe utility when generating a proxy for the class to be consumed by a Web service client. 
            For this purpose, it is essential that the method return an accurate XML schema that describes the XML representation of your object generated by the WriteXml method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Collections.SerializableDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            The ReadXml method must reconstitute your object using the information that was written by the WriteXml method.
            When this method is called, the reader is positioned at the start of the element that wraps the information for your type. 
            That is, just before the start tag that indicates the beginning of a serialized object. 
            When this method returns, it must have read the entire element from beginning to end, including all of its contents. 
            Unlike the WriteXml method, the framework does not handle the wrapper element automatically. 
            Your implementation must do so. Failing to observe these positioning rules may cause code to generate unexpected runtime exceptions or corrupt data.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Semio.Core.Collections.SerializableDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            The WriteXml implementation you provide should write out the XML representation of the object. 
            The framework writes a wrapper element and positions the XML writer after its start. 
            Your implementation may write its contents, including child elements. The framework then closes the wrapper element.
            Write sufficient information to the XmlWriter stream to allow the ReadXml method to reconstitute your object.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:Semio.Core.Comparers.OrderedStringComparer">
            <summary>
            A comparer for sorting a set of strings based on a specified order.
            </summary>
        </member>
        <member name="M:Semio.Core.Comparers.OrderedStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.
            -or-
            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.
            </exception>
        </member>
        <member name="P:Semio.Core.Comparers.OrderedStringComparer.OrderedStrings">
            <summary>
            Gets or sets the set of strings in their comma delimited sort order.
            </summary>
        </member>
        <member name="P:Semio.Core.Comparers.OrderedStringComparer.StringList">
            <summary>
            The private ordered list of strings.
            </summary>
        </member>
        <member name="T:Semio.Core.Config.ClinWebSettings">
            <summary>
            Data stored in Settings.Default.ClinWebSettings
            </summary>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Config.ClinWebSettings"/> class.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.GetSetting(System.String)">
            <summary>
            :::::::::::::::::::::::::::::::::::::::::::::::::::::
            This is the single entry point for getting a setting
            :::::::::::::::::::::::::::::::::::::::::::::::::::::
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.SetSetting(System.String,System.String)">
            <summary>
            :::::::::::::::::::::::::::::::::::::::::::::::::::::
            This is the single entry point for setting values
            :::::::::::::::::::::::::::::::::::::::::::::::::::::
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.ResetClinWebSettings(System.Boolean)">
            <summary>
            Resets the ClinWebSettings.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.CheckSecurityBeforeUpdate(System.String,System.String)">
            <summary>
            Checks the security before adding an AppSetting or ConnectionString
            to the the ClinWebSettings property
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.IsAllowedToAdd(System.Xml.Linq.XElement)">
            <summary>
            Determines whether [is allowed to add] [the specified element].
            </summary>
            <param name="element">The element.</param>
            <returns>
            	<c>true</c> if [is allowed to add] [the specified element]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.SyncClinWebSettingsWithAppConfig(System.Boolean)">
            <summary>
            Syncs the clin web settings with app config.  If the
            AppSetting or ConnectionString does not exist in XMLData 
            it will be added.  If it does exist it will only be updated
            if the setting is *not* in the AlwaysUpdate delimited list
            Note: AlwaysUpdate is an AppSetting in App.config
            </summary>
        </member>
        <member name="M:Semio.Core.Config.ClinWebSettings.UpdateNode(System.String,System.String)">
            <summary>
            Updates the node.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Semio.Core.Config.ClinWebSettings.IsTestMode">
            <summary>
             app is in test mode
             used primarily in pa canvas
            </summary>
        </member>
        <member name="P:Semio.Core.Config.ClinWebSettings.IsTestModeProtocolApproved">
            <summary>
             Protocal Approved override when app is in test mode
             used primarily in pa canvas
            </summary>
        </member>
        <member name="T:Semio.Core.Config.Constants.ClinWebSettingTypes">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.LastReset">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.SemioService">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.SemioReferenceList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.SemioEntityODataService">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.AtomPubDataProviderFmt">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.SubjectId">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.aggBasePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.theme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.SingleScreenStartupMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.IsFacetsCached">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.IsDataCached">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.IsAlwaysSavingCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.AlwaysUpdate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.UpdateTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.SoftwareRenderingOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.UpdateSoftwareRenderingOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.AggregatorServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.Constants.ClinWebSettingTypes.MaxExplorerResults">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Config.AppConfig">
            <summary>
            This class is intended to be resolved.  If a Unity Container
            is not available you can resolve one as follows:
            
            ISystemConfiguration config = 
               SystemConfiguration.Container.Resolve ISystemConfiguration ()
            
            If the class requiring this implementation is part of the 
            dependency chain it can be instantiated as follows:
            [Dependency]
            public ISystemConfiguration SysConfig {get; set; }
            
            You can also access all instance members via 
                SystemConfiguration.Instance. Member 
                
            This provides global (application) scope to the members of this
            class.  Since we are using a Unity singleton (not truly a static
            class but the same instance always returned) it will be possible 
            later to scope this the state maintained by this class to module
            as well as application levels. 
            
            Note: "static" methods and properties cannot be scoped (easily).
            http://msdn.microsoft.com/en-us/library/dd458940.aspx#Emulating
            </summary>
        </member>
        <member name="T:Semio.Core.Config.ISystemConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Config.ISystemConfiguration.GetSetting(System.String)">
            <summary>
            Gets the setting (wrapper to ClinWebSettings).
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.ISystemConfiguration.SetSetting(System.String,System.String)">
            <summary>
            Sets the setting (wrapper to ClinWebSettings).
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.ISystemConfiguration.ResetClinWebSettings">
            <summary>
            Resets the ClinWebSettings.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.ISystemConfiguration.GetContainer">
            <summary>
            Returns a Container reference. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.ISystemConfiguration.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.LastReset">
            <summary>
            AppSetting values in the following list will *always* 
            overwrite the saved state settings
            </summary>
            <value>The last reset.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.AlwaysUpdate">
            <summary>
            AppSetting values in the following list will *always* 
            overwrite the saved state settings
            </summary>
            <value>The always update.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.SemioService">
            <summary>
            Gets or sets the semio service.
            </summary>
            <value>The semio service.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.SemioReferenceList">
            <summary>
            Gets or sets the semio reference list.
            </summary>
            <value>The semio reference list.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.AtomPubDataProviderFmt">
            <summary>
            Gets or sets the atom pub data provider FMT.
            </summary>
            <value>The atom pub data provider FMT.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.SubjectId">
            <summary>
            Gets or sets the subject id.
            </summary>
            <value>The subject id.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.aggBasePath">
            <summary>
            Gets or sets the agg base path.
            </summary>
            <value>The agg base path.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.SingleScreenStartupMode">
            <summary>
            Gets or sets the single screen startup mode.
            </summary>
            <value>The single screen startup mode.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.IsFacetsCached">
            <summary>
            Gets or sets the is facets cached.
            </summary>
            <value>The is facets cached.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.IsDataCached">
            <summary>
            Gets or sets the is data cached.
            </summary>
            <value>The is data cached.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.IsCpArchiveRequireSelections">
            <summary>
            Gets or sets the CP Approval .
            </summary>
            <value>IsCPArchiveRequireSelections.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.IsAlwaysSavingCache">
            <summary>
            Gets or sets the is always saving cache.
            </summary>
            <value>The is always saving cache.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.SubjectList">
            <summary>
            Gets or sets the subject list.
            </summary>
            <value>The subject list.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.SelectedSubject">
            <summary>
            Gets or sets the selected subject.
            </summary>
            <value>The selected subject.</value>
        </member>
        <member name="P:Semio.Core.Config.ISystemConfiguration.IsUnitTest">
            <summary>
            Gets or sets a value indicating whether this instance is unit test.
            </summary>
            <value>
            	<c>true</c> if this instance is unit test; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Semio.Core.Config.AppConfig.SyncRoot">
            <summary>
            Thread synchronization root.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the SystemConfiguration class.
            Resolved by Bootstrapper which results in the container
            being available for class use
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.#ctor">
            <summary>
            Called by Instance (if applicable - lazy instantiation)
            Initializes a new instance of the SystemConfiguration class.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.Initialize">
            <summary>
            Initializes this instance (called by Bootstrapper)
            after user has authenticated.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.GetSetting(System.String)">
            <summary>
            Gets the setting (wrapper to ClinWebSettings).
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.SetSetting(System.String,System.String)">
            <summary>
            Sets the setting (wrapper to ClinWebSettings).
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.ResetClinWebSettings">
            <summary>
            Resets the ClinWebSettings.
            </summary>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.GetContainer">
            <summary>
            Since we can't have static methods/properties in our 
            interface we'll have to provide a method that can be
            accessed by our instance variables.
            
            For processes that don't have access to an instance,
            because the dependency chain is broken, we'll provide
            the static Configuration and Container properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.AppConfig.RegisterType(System.Type,System.Type)">
            <summary>
            Registers the specified concrete type for the specified interface type in the container.
            </summary>
            <param name="interfaceType">Type of the interface.</param>
            <param name="concreteType">Type of the concrete class.</param>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.IsUnitTest">
            <summary>
            Gets a value indicating whether we are in a Unit Test or not
            </summary>
            <value>
            	<c>true</c> if this instance is unit test; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SubjectList">
            <summary>
            Gets or sets the subject list.
            </summary>
            <value>The subject list.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SelectedSubject">
            <summary>
            Gets or sets the selected subject.
            </summary>
            <value>The selected subject.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SubjectId">
            <summary>
            Gets or sets the subject id.
            </summary>
            <value>The subject id.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.LastReset">
            <summary>
            AppSetting values in the following list will *always*
            overwrite the saved state settings
            </summary>
            <value>The last reset.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.AlwaysUpdate">
            <summary>
            AppSetting values in the following list will *always*
            overwrite the saved state settings
            </summary>
            <value>The always update.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SemioService">
            <summary>
            Gets or sets the semio service.
            </summary>
            <value>The semio service.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SemioReferenceList">
            <summary>
            Gets or sets the semio reference list.
            </summary>
            <value>The semio reference list.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.AtomPubDataProviderFmt">
            <summary>
            Gets or sets the atom pub data provider FMT.
            </summary>
            <value>The atom pub data provider FMT.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.aggBasePath">
            <summary>
            Gets or sets the agg base path.
            </summary>
            <value>The agg base path.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SingleScreenStartupMode">
            <summary>
            Gets or sets the single screen startup mode.
            </summary>
            <value>The single screen startup mode.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.IsCpArchiveRequireSelections">
            <summary>
            Gets or sets the CP Approval .
            </summary>
            <value>IsCPArchiveRequireSelections.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.IsFacetsCached">
            <summary>
            Gets or sets the is facets cached.
            </summary>
            <value>The is facets cached.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.IsDataCached">
            <summary>
            Gets or sets the is data cached.
            </summary>
            <value>The is data cached.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.IsAlwaysSavingCache">
            <summary>
            Gets or sets the is always saving cache.
            </summary>
            <value>The is always saving cache.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.SemioODataService">
            <summary>
            Gets or sets the semio service.
            </summary>
            <value>The semio service.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.Theme">
            <summary>
            Gets the current application theme.
            </summary>
            <value>The theme.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.ClinWebSettings">
            <summary>
            Gets or sets the ClinWeb settings. All methods
            in this class wrap ClinWebSettings
            </summary>
            <value>The clin web settings.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.Configuration">
            <summary>
            Gets the configuration.  The Container is resolved
            and set in this classes constructor
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.Container">
            <summary>
            Gets or sets the container
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.Instance">
            <summary>
            Provide access to a Static Instance
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.ApplicationDirectory">
            <summary>
            Returns the directory from which the application was launched.
            </summary>
        </member>
        <member name="P:Semio.Core.Config.AppConfig.RegistrySettings">
            <summary>
            Gets or sets the registry settings.
            </summary>
            <value>The registry settings.</value>
        </member>
        <member name="T:Semio.Core.Config.ApplicationTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.ApplicationTheme.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.ApplicationTheme.Presentation">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.ApplicationTheme.Desktop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Config.ApplicationTheme.Other">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Config.RegistrySettings">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetCurrentUserValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  EnableDeveloperMode</param>
            <param name="defaultValue">Example:  false</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetCurrentUserValue(System.String,System.String,System.String,System.Double)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetCurrentUserValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetCurrentUserValue(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetCurrentUserValue(System.String,System.String,System.String,System.Object)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.SetCurrentUserValue(System.String,System.String,System.String,System.Object)">
            <summary>
            Sets the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="value">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetLocalMachineValue(System.String,System.String,System.String)">
            <summary>
            Returns the value of the specified HKEY_LOCAL_MACHINE key and value, or defaultValue if the key or value do not exist, cast to string.
            </summary>
            <param name="keyName">Example:  @"SOFTWARE\Classes\InfoPath.Document.2\shell\Open\command"</param>
            <param name="valueName">Example: ""</param>
            <param name="defaultValue">Example:  ""</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Config.RegistrySettings.GetLocalMachineValue(System.String,System.String,System.Object)">
            <summary>
            Returns the value of the specified HKEY_LOCAL_MACHINE key and value, or defaultValue if the key or value do not exist, cast to object.
            </summary>
            <param name="keyName">Example:  @"SOFTWARE\Classes\InfoPath.Document.2\shell\Open\command"</param>
            <param name="valueName">Example: ""</param>
            <param name="defaultValue">Example:  ""</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.EnumUtilities">
            <summary>
            Utilities to support working with enum classes including parsing
            </summary>
        </member>
        <member name="M:Semio.Core.EnumUtilities.GetDescription(System.Enum)">
            <summary>
            Gets the description for an enum value.
            </summary>
            <param name="item">The item to get the description for.</param>
            <returns>The string description.</returns>
        </member>
        <member name="M:Semio.Core.EnumUtilities.GetObjectDescription``1(``0)">
            <summary>
            Gets the description for an enum value.
            </summary>
            <param name="item">The item to get the description for.</param>
            <returns>The string description.</returns>
        </member>
        <member name="M:Semio.Core.EnumUtilities.GetExtendedDescription(System.Enum)">
            <summary>
            Gets the extended description.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.EnumUtilities.ParseEnum(System.String,System.Type)">
            <summary>
            Parses an enum value from a name or description string.
            </summary>
            <param name="value">The value to parse.</param>
            <param name="targetEnum">The target enum type.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Extensions.NumberExtensions">
            <summary>
            Extension methods for numeric types.
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.NumberExtensions.LogicallyEquals(System.Double,System.Double)">
            <summary>
            Determines whether two doubles are close enough to be considered logically equal.
            </summary>
            <param name="a">The first number to compare.</param>
            <param name="b">The second number to compare.</param>
            <remarks>Uses a deviation of 0.0001</remarks>
            <returns>True if the difference between a and b is less than 0.0001.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.NumberExtensions.LogicallyEquals(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether two doubles are close enough to be considered logically equal.
            </summary>
            <param name="a">The first number to compare.</param>
            <param name="b">The second number to compare.</param>
            <param name="maxDeviation">The max deviation between values considered equal.</param>
            <returns>True if the difference between a and b is less than the maxDeviation.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.NumberExtensions.Round(System.Double)">
            <summary>
            Performs a normal symmetric arithmetic round operation on a double.
            </summary>
            <param name="d">The double to round.</param>
            <returns>The whole number representing the rounded double value.</returns>
        </member>
        <member name="T:Semio.Core.Extensions.TypeExtensions">
            <summary>
            A set of extension methods for <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Determines if the type derives from the specified raw generic type.
            </summary>
            <param name="type">The type.</param>
            <param name="rawGeneric">The raw generic type.</param>
            <remarks>
            Logic liberated from: http://stackoverflow.com/questions/457676/c-reflection-check-if-a-class-is-derived-from-a-generic-class
            </remarks>
            <returns>True if type derives from the specified raw generic type, otherwise false.</returns>
        </member>
        <member name="T:Semio.Core.Extensions.XmlExtensions">
            <summary>
            Contains extension methods for XML types.
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the attribute value.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeInt(System.Xml.Linq.XElement,System.String,System.Int32)">
            <summary>
            Gets the attribute value as an integer.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeIntNullable(System.Xml.Linq.XElement,System.String,System.Nullable{System.Int32})">
            <summary>
            Gets the attribute value as an integer.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The integer element separator.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeIntArray(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Gets the attribute value as an integer collection.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="separator">The integer element separator.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeBoolean(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Gets the attribute value as a boolean.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeDecimal(System.Xml.Linq.XElement,System.String,System.Decimal)">
            <summary>
            Gets the attribute value as a decimal.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeDecimalNullable(System.Xml.Linq.XElement,System.String)">
            <summary>
            Gets the attribute value as a decimal.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeDouble(System.Xml.Linq.XElement,System.String,System.Double)">
            <summary>
            Gets the attribute value as a double.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeDoubleNullable(System.Xml.Linq.XElement,System.String,System.Nullable{System.Double})">
            <summary>
            Gets the attribute value as a double.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeDateTime(System.Xml.Linq.XElement,System.String,System.DateTime)">
            <summary>
            Gets the attribute value as a DateTime.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.GetAttributeEnum``1(System.Xml.Linq.XElement,System.String,``0)">
            <summary>
            Gets the attribute value as a double.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value to use if attribute parsing fails.</param>
            <returns></returns>
        </member>
        <member name="F:Semio.Core.Extensions.XmlExtensions.GuidRegex">
             <summary>
            
             </summary>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Tries to parse the specified string into a GUID.
            </summary>
            <param name="text">The text to parse.</param>
            <param name="output">The parsed Guid.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.XmlExtensions.SemanticEquals(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Determines whether two XML nodes are semantically equivalent.
            </summary>
            <param name="a">The node to compare to.</param>
            <param name="b">The node to compare.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.AsyncHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync(System.Action)">
            <summary>
            Executes the async.
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``1(System.Action{``0},``0)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``2(System.Action{``0,``1},``0,``1)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="arg4">The arg4.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync(System.Action,System.Action)">
            <summary>
            Executes the async.
            </summary>
            <param name="action">The action.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``1(System.Action{``0},``0,System.Action)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action">The action.</param>
            <param name="arg">The arg.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``2(System.Action{``0,``1},``0,``1,System.Action)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``3(System.Action{``0,``1,``2},``0,``1,``2,System.Action)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,System.Action)">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="action">The action.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="arg4">The arg4.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``1(System.Func{``0},System.Action{``0})">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``2(System.Func{``0,``1},``0,System.Action{``1})">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg">The arg.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``3(System.Func{``0,``1,``2},``0,``1,System.Action{``2})">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Action{``3})">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteAsync``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Action{``4})">
            <summary>
            Executes the async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="arg4">The arg4.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Action{``0})">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},``0,System.Action{``1})">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg">The arg.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}},``0,``1,System.Action{``2})">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``4(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},``0,``1,``2,System.Action{``3})">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``5(System.Func{``0,``1,``2,``3,System.Collections.Generic.IEnumerable{``4}},``0,``1,``2,``3,System.Action{``4})">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="arg4">The arg4.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``1(System.Func{System.Collections.Generic.IEnumerable{``0}},System.Action{``0},System.Action)">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="callback">The callback.</param>
            <param name="completed">The completed.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},``0,System.Action{``1},System.Action)">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg">The arg.</param>
            <param name="callback">The callback.</param>
            <param name="completed">The completed.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``3(System.Func{``0,``1,System.Collections.Generic.IEnumerable{``2}},``0,``1,System.Action{``2},System.Action)">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="callback">The callback.</param>
            <param name="completed">The completed.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``4(System.Func{``0,``1,``2,System.Collections.Generic.IEnumerable{``3}},``0,``1,``2,System.Action{``3},System.Action)">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="callback">The callback.</param>
            <param name="completed">The completed.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExecuteCollectionResultAsync``5(System.Func{``0,``1,``2,``3,System.Collections.Generic.IEnumerable{``4}},``0,``1,``2,``3,System.Action{``4},System.Action)">
            <summary>
            Executes the collection result async.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="func">The func.</param>
            <param name="arg1">The arg1.</param>
            <param name="arg2">The arg2.</param>
            <param name="arg3">The arg3.</param>
            <param name="arg4">The arg4.</param>
            <param name="callback">The callback.</param>
            <param name="completed">The completed.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.AsyncHelper.ExceptionSafeInvoke(System.Action)">
            <summary>
            Invoke action, catching and logging any exceptions (without rethrowing them).
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:Semio.Core.Helpers.DateTimeHelper">
            <summary>
            Helper container for DateTime utilities.
            </summary>
        </member>
        <member name="F:Semio.Core.Helpers.DateTimeHelper.DateTimeFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Helpers.DateTimeHelper.DateTimeDefault">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Helpers.DateTimeHelper.DurationDefault">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Helpers.GZipHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.GZipHelper.Compress(System.String)">
            <summary>
            Compresses the specified text.
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.GZipHelper.Decompress(System.String)">
            <summary>
            Decompresses the specified compressed text.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.PredicateBuilder">
            <summary>
             enables dynamic and and or predicate building
             expression is compatible with IQueryable instead of Ienumerable    
            </summary>
             <code>
                 List&lt;MyObject&gt; foo = new List&lt;MyObject&gt;(){bunch of stuff}
                 var predicate = PredicateBuilder.True&lt;MyObject&gt;();
                 predicate = predicate.And(c => c.SomeProperty == foo1);
                 predicate = predicate.And(c => c.AnotherProperty == foo2);
             
                 var list2 = foo.AsQueryable().Where(predicate);
             
             </code>
        </member>
        <member name="M:Semio.Core.Helpers.PredicateBuilder.True``1">
            <summary>
            Expression returning True.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.PredicateBuilder.False``1">
            <summary>
            Expression returning False.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Expression returning the OR of the specified expressions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The first expression.</param>
            <param name="expr2">The second expression.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Expression returning the AND of the specified expressions.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The first expression.</param>
            <param name="expr2">The second expression.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.TextFormattingHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.TextFormattingHelper.InsertFormatting(System.String,System.String,System.Int32,System.Boolean,System.String,System.String)">
            <summary>
            Inserts markup before and after occurrences of 'target' text in 'text'
            </summary>
            <param name="text">The text to modify</param>
            <param name="target">The text to look for</param>
            <param name="options">0=Perfect match, 1=Starts with, 2=Ends with, 3=Contains</param>
            <param name="caseSensitive">True if the search is case sensitive</param>
            <param name="leftMarkup">The left markup to insert, for example 'Bold'</param>
            <param name="rightMarkup">The right markup to insert, for example 'Bold'</param>
            <returns>The string with the markup inserted</returns>
        </member>
        <member name="M:Semio.Core.Helpers.TextFormattingHelper.InsertFormatting(System.String,System.String,System.Int32,System.Boolean,System.String,System.String,System.Char[])">
            <summary>
            Splits a string by the separator, then inserts markup for each individual string
            </summary>
            <param name="text">The text to modify</param>
            <param name="target">The text to look for</param>
            <param name="options">0=Perfect match, 1=Starts with, 2=Ends with, 3=Contains</param>
            <param name="caseSensitive">True if the search is case sensitive</param>
            <param name="leftMarkup">The left markup to insert, for example 'Bold'</param>
            <param name="rightMarkup">The right markup to insert, for example 'Bold'</param>
            <param name="separator">An array of characters that delimit the substrings in this instance</param>
            <returns>The string with the markup inserted</returns>
        </member>
        <member name="M:Semio.Core.Helpers.TextFormattingHelper.AsHtml(System.String)">
            <summary>
            Wraps the string in html tags
            </summary>
            <param name="str">string to wrap in html tags</param>
            <returns>The string wrapped in html tags</returns>
        </member>
        <member name="M:Semio.Core.Helpers.TextFormattingHelper.InsertAndWrapFormatting(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text">The text to modify</param>
            <param name="target">The text to look for</param>
            <param name="options">0=Perfect match, 1=Starts with, 2=Ends with, 3=Contains</param>
            <param name="leftMarkup">The left markup to insert, for example 'Bold'</param>
            <param name="rightMarkup">The right markup to insert, for example '/Bold'</param>
            <param name="leftElement">The left element with which to wrap the entire resulting text</param>
            <param name="rightElement">The right element with which to wrap the entire resulting text</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Lexicon.Lexiconalizer">
            <summary>
            This singleton object applies company lexicon context to display strings.
            A service may provide strings intended for display to a user, and this
            class can convert that string into a lexicon for an individual of that
            company.
            
            <example>
            At application startup:
            <code>
            Lexiconalizer.SetLexicon(LexiconSpecifier.Semio, semioLexicon);
            Lexiconalizer.SetLexicon(LexiconSpecifier.Lilly, lillyLexicon);
            Lexiconalizer.SetLexicon(LexiconSpecifier.Quintiles, quintilesLexicon);
            </code>
            
            Converting a string:
            <code>
            var title = "{Semio.Milestone.SSU} Milestone";
            var display = Lexiconalizer.GetDisplay(LexiconSpecifier.Lilly, title);
            </code>
            
            Calling a service, and displaying the result:
            <code>
            var task = timelineDataProvider.GetTask(taskId);
            var display = Lexiconalizer.GetDisplay(LexiconSpecifier.Lilly, task.Title);
            wpfTaskLabel.Text = display;
            </code>
            
            </example>
            </summary>
        </member>
        <member name="M:Semio.Core.Lexicon.Lexiconalizer.SetLexicon(Semio.Core.Lexicon.LexiconSpecifier,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set a context dictionary
            </summary>
            <param name="lex">Lexicon (ex: Company) being applied.</param>
            <param name="dict">The dictionary of conversions for the lexicon</param>
        </member>
        <member name="M:Semio.Core.Lexicon.Lexiconalizer.GetDisplay(Semio.Core.Lexicon.LexiconSpecifier,System.String)">
            <summary>
            Get the display string for the provided lex.
            </summary>
            <remarks>
            <para>
            If no lexicons are set with SetLexicon(), the last segment of each
            encountered dotted key string is returned.
            </para>
            <para>
            If the provided str contains a lexicon key string that is not in
            the requested lexicon dictionary (specified by lex), the key string
            is left in the output.
            </para>
            <example>
            If lexicon key string not found:
            <code>
            var title = "{Semio.Milestone.blahblah} Milestone";
            var display = Lexiconalizer.GetDisplay(LexiconSpecifier.Lilly, title);
            Assert.AreEqual(title, display); // display and title are equal!
            </code>
            </example>
            </remarks>
            <param name="lex">Lexicon (ex: Company) being applied.</param>
            <param name="str">String to convert</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Lexicon.LexiconSpecifier">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Lexicon.LexiconSpecifier.Semio">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Lexicon.LexiconSpecifier.Lilly">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Lexicon.LexiconSpecifier.Quintiles">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.EventAggregators.ModuleEventAggregator">
            <summary>
            Module scope event aggregation
            </summary>
        </member>
        <member name="T:Semio.Core.Interfaces.IModuleEventAggregator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.EventAggregators.PresenterEventAggregator">
            <summary>
            Presenter scope event aggregator
            </summary>
        </member>
        <member name="T:Semio.Core.Interfaces.IPresenterEventAggregator">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Exceptions.DefaultError">
            <summary>
            Error class
            </summary>
        </member>
        <member name="T:Semio.Core.Interfaces.IError">
            <summary>
            Error interface
            </summary>
        </member>
        <member name="M:Semio.Core.Interfaces.IError.SetError(System.Exception)">
            <summary>
            Sets Error, logs it and publishes
            SemioErrorEvent with contents.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Semio.Core.Interfaces.IError.SetError(System.Exception,System.String)">
            <summary>
            Sets Error, logs it and publishes
            SemioErrorEvent with contents.
            </summary>
            <param name="ex">The ex.</param>
            <param name="friendlyMessage">The friendly message.</param>
        </member>
        <member name="M:Semio.Core.Interfaces.IError.SetError(System.Exception,System.String,System.Int32)">
            <summary>
            Sets Error, logs it and publishes
            SemioErrorEvent with contents.
            </summary>
            <param name="ex">The ex.</param>
            <param name="friendlyMessage">The friendly message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:Semio.Core.Interfaces.IError.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.IError.ErrorItem">
            <summary>
            Gets or sets the error item.
            </summary>
            <value>The error item.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.IError.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.IError.Exceptions">
            <summary>
            Gets or sets the exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.IError.IsError">
            <summary>
            Gets a value indicating whether this instance is error.
            </summary>
            <value><c>true</c> if this instance is error; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Semio.Core.Exceptions.DefaultError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Exceptions.DefaultError"/> class.
            </summary>
        </member>
        <member name="M:Semio.Core.Exceptions.DefaultError.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Exceptions.DefaultError"/> class.
            </summary>
        </member>
        <member name="M:Semio.Core.Exceptions.DefaultError.ReportIt(Semio.Core.Exceptions.ErrorItem)">
            <summary>
            Reports it.
            </summary>
            <param name="newError">The new error.</param>
        </member>
        <member name="M:Semio.Core.Exceptions.DefaultError.SetError(System.Exception)">
            <summary>
            Sets the error.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Semio.Core.Exceptions.DefaultError.SetError(System.Exception,System.String)">
            <summary>
            Sets the error.
            </summary>
            <param name="ex">The ex.</param>
            <param name="friendlyMessage">The friendly message.</param>
        </member>
        <member name="M:Semio.Core.Exceptions.DefaultError.SetError(System.Exception,System.String,System.Int32)">
            <summary>
            Sets the error.
            </summary>
            <param name="ex">The ex.</param>
            <param name="friendlyMessage">The friendly message.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:Semio.Core.Exceptions.DefaultError.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.DefaultError.EventAggregator">
            <summary>
            Gets or sets the event aggregator.
            </summary>
            <value>The event aggregator.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.DefaultError.Exceptions">
            <summary>
            Gets or sets the exceptions.
            </summary>
            <value>The exceptions.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.DefaultError.IsError">
            <summary>
            Gets or sets a value indicating whether this instance is error.
            </summary>
            <value><c>true</c> if this instance is error; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.DefaultError.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.DefaultError.ErrorItem">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="T:Semio.Core.Exceptions.ErrorItem">
            <summary>
            Error Class
            </summary>
        </member>
        <member name="P:Semio.Core.Exceptions.ErrorItem.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.ErrorItem.FriendlyMessage">
            <summary>
            Gets or sets the friendly message.
            </summary>
            <value>The friendly message.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.ErrorItem.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>The error code.</value>
        </member>
        <member name="T:Semio.Core.Exceptions.SemioErrorEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Exceptions.SemioErrorEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Semio.Core.Exceptions.SemioErrorEventArgs.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.SemioErrorEventArgs.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Semio.Core.Exceptions.SemioErrorEventArgs.ErrorItem">
            <summary>
            Gets or sets the error item.
            </summary>
            <value>The error item.</value>
        </member>
        <member name="T:Semio.Core.Extensions.CollectionExtensions">
            <summary>
            Container for extension methods related to collections
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.CollectionEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the items contained in two collections are equal.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The primary collection.</param>
            <param name="other">The other collection.</param>
            <returns>True if the collections are equal, otherwise false.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.ToList``1(System.Collections.IEnumerable)">
            <summary>
            Creates a generic list containing the objects in the specified IEnumerable collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The source collection.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified collection is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the specified collection is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified collection is empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the specified collection is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes a collection of objects from a list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            Removes a collection of objects from a list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="other"></param>
            <param name="comparator"> </param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            Find the index of the toFind element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list of elements.</param>
            <param name="toFind">The element to find.</param>
            <param name="areEqual">A custom method to figure out if the objects are equal</param>
            <returns>Index of the specified element, or -1</returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.Range(System.Int32)">
            <summary>
            Returns an IEnumerable of integers between 1 and the specified count.
            </summary>
            <param name="count">Maximum number in the range</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.Range(System.Int32,System.Int32)">
            <summary>
            Returns an IEnumerable of integers between the start and end values.
            </summary>
            <param name="start">First value in the returned enumerable</param>
            <param name="end">Last value in the returned enumerable</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds a set of elements into an IDictionary, if the item already exists in the source dictionary then the item in the additions is ignored.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="primary">The primary dictionary to add the elements to.</param>
            <param name="additions">The items to add to the primary dictionary.</param>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.ToCombinedString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a combined string representation for the specified items.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="items">The items.</param>
            <returns>The combined string.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.CollectionExtensions.AsIntegers(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Int32)">
            <summary>
            Converts items of a string collection which represent integers to a collection of integers,
             optionally including default values for non-integer strings.
            </summary>
            <param name="strings">The string collection.</param>
            <param name="includeNonInts">if set to <c>true</c> include non integer string values.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Extensions.ExceptionExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.AsFriendlyReason(System.Exception,System.String)">
            <summary>
            Associate a user message with the exception.
            </summary>
            <param name="ex"></param>
            <param name="message"></param>
            <returns>The passed exception.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.AsFriendlyReason(System.Exception)">
            <summary>
            Associate the Message property as the user message.
            </summary>
            <param name="ex"></param>
            <returns>The passed exception.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.SetFriendlyReason(System.Exception,System.String)">
            <summary>
            Associate a Friendly Reason with the exception.
            </summary>
            <param name="ex"></param>
            <param name="str"></param>
            <returns>The passed exception.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.GetFriendlyReason(System.Exception)">
            <summary>
             get the friendly reason
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.SetAlertedUser(System.Exception,System.Boolean)">
            <summary>
            Mark this exception as having been shown to the user (ie: don't show again)
            </summary>
            <param name="ex">The ex.</param>
            <param name="shown">if set to <c>true</c> [shown].</param>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.HaveAlertedUser(System.Exception)">
            <summary>
            Determine if this has already been shown to the user.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.SetIgnore(System.Exception,System.Boolean)">
            <summary>
            Mark this exception as how it was handled (ie: ignore or throw)
            </summary>
            <param name="ex">The ex.</param>
            <param name="handled">if set to <c>true</c> [handled].</param>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.HaveIgnored(System.Exception)">
            <summary>
            Determine if this has already been shown to the user.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.GetFormattedException(System.Exception)">
            <summary>
            Format an exception, including any inner exceptions, for logging or display.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.GetFormattedException(System.Exception,System.String)">
            <summary>
            Format an exception, including any inner exceptions, for logging or display.
            </summary>
            <param name="ex"></param>
            <param name="message">An optional string to be included as the first lind of the output.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.GetUserErrorMessage(System.Exception)">
            <summary>
            Find any user or friendly message within the exception.
            </summary>
            <remarks>
            The FriendlyReason will be appended if it is found (and isn't merely a copy of the UserErrorMessage).
            </remarks>
            <param name="ex"></param>
            <returns>Message if it exists, otherwise null.</returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExceptionExtension.GetUserErrorMessage(System.Exception,System.String)">
            <summary>
            Find any user or friendly message within the exception.
            </summary>
            <remarks>
            Any UserErrorMessage in the exception will override the paramUserErrorMessage.
            The FriendlyReason will be appended if it is found (and isn't merely a copy of the UserErrorMessage).
            </remarks>
            <param name="ex"></param>
            <param name="paramUserErrorMessage">Overall message to prefix result with (optional, may be null)</param>
            <returns>Message if it exists, otherwise null.</returns>
        </member>
        <member name="T:Semio.Core.Extensions.ExtendEnumerable">
            <summary>
            Container for extension methods related to Enumerables
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.ExtendEnumerable.Flatten``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Flattens the specified multi-dimension collection into a single dimension.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRtrn">The type of the individual collection items.</typeparam>
            <param name="obj">The multi-dimensional collection.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExtendEnumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the specified object to the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="obj">The object to append.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExtendEnumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Fors the each.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExtendEnumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the specified object to the list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="obj">The object to append.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExtendEnumerable.ToCSV``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts IEnumerable to a list of delimited strings
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.ExtendEnumerable.ToCSV``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Converts IEnumerable to a list of delimited strings
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <param name="separator">The separator.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Extensions.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            Determines whether the specified value is empty.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Semio.Core.Extensions.StringExtensions.Zip(System.String)">
            <summary>
            Zips the specified string to zip.
            </summary>
            <param name="stringToZip">The string to zip.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.StringExtensions.Unzip(System.String)">
            <summary>
            Unzips the specified string to unzip.
            </summary>
            <param name="stringToUnzip">The string to unzip.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Extensions.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            Converts a string to an integer or a default value.
            </summary>
            <param name="number">The number.</param>
            <param name="defaultValue">The default value.</param>
            <returns>A parsed integer value or the default.</returns>
        </member>
        <member name="T:Semio.Core.Helpers.EnumHelper">
             <summary>
            
             </summary>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.Parse``1(System.String)">
            <summary>
            Replacement for Enum.Parse()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.ParseFromDescription``1(System.String)">
            <summary>
            Find the enum from the description
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.ParseFromDescriptionThenName``1(System.String)">
            <summary>
            Find the enum from the description or name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.GetName``1(``0)">
            <summary>
            Replacement for Enum.ToString()
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.GetDescription``1(``0)">
            <summary>
            Gets the description for an enum value.
            </summary>
            <remarks>
            TODO: Copied from Semio.ClinWeb.Common.EnumUtilities, should
            copy EnumUtilities into EnumHelper.
            </remarks>
            <param name="item">The item to get the description for.</param>
            <returns>The string description.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.GetDescription(System.Reflection.FieldInfo)">
            <summary>
            Gets the description for an enum value info.
            </summary>
            <param name="info">The info to get the description for.</param>
            <returns>The string description.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.GetExtendedDescription``1(``0)">
            <summary>
            Gets the extended description.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.EnumHelper.GetExtendedDescription(System.Reflection.FieldInfo)">
            <summary>
            Gets the extended description.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.FileHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.FileHelper.CreateDirectory(System.String)">
            <summary>
            Create the specified path if it does not exist.  
            Multiple subdirectories will be created if needed.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Semio.Core.Helpers.FileHelper.DeleteIfExists(System.String)">
            <summary>
            Delete the specified file, if it exists.
            </summary>
            <param name="fileName"></param>
            <returns>True if the file was deleted.</returns>
        </member>
        <member name="T:Semio.Core.Helpers.HtmlHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.HtmlHelper.GetBody(System.String)">
            <summary>
             Returns the BODY element of the HTML.
             If the content is missing or invalid, an empty BODY element is returned.
            </summary>
            <param name="xhtml">XHTML to get the body element from</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.HtmlHelper.StripHtml(System.String)">
            <summary>
            Removes all html tags and returns only the text elements.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.SerializationHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.Clone``1(``0)">
            <summary>
            Utility method to create a cloned instance of a data object to be bound
            to the UI. This gives the UI the ability to cancel out of changes
            to an in-memory object to be persisted.
            </summary>
            <typeparam name="T">The type to clone.</typeparam>
            <param name="source">The object to clone</param>
            <returns>The cloned instance.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ToXml``1(``0,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serialize object to XML.
            </summary>
            <remarks>
            <para>
            If the object's class is a DataContract, then the DataContractSerializer will be used,
            otherwise, the XmlSerializer will be used.
            </para>
            </remarks>
            <typeparam name="T">Type of object being serialized</typeparam>
            <param name="obj">Object to serialize</param>
            <param name="encoding">Encoding to use to generate XML</param>
            <param name="knownTypes">Hint for known Types being used in Type of object to be serialized</param>
            <returns>Xml string of serialized object</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ToObject``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize XML to an object.
            </summary>
            <remarks>
            <para>
            If the provided type is a DataContract, then the DataContractSerializer will be used,
            otherwise, the XmlSerializer will be used.
            </para>
            </remarks>
            <typeparam name="T">Type of object desired</typeparam>
            <param name="source">Xml string that should be hydrated into the requested object type (T)</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T hydrated from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ToObject``1(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize XML to an object.
            </summary>
            <remarks>
            <para>
            If the provided type is a DataContract, then the DataContractSerializer will be used,
            otherwise, the XmlSerializer will be used.
            </para>
            </remarks>
            <typeparam name="T">Type of object desired</typeparam>
            <param name="source">XmlReader that should be hydrated into the requested object type (T)</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T hydrated from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ToContractObject``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Some types, such as Dictionaries, won't be recognized as requiring
            the xml contract to deserialize so the ToObject has to crash 
            and be caught by the try/catch to use the last chance XmlToContractObject
            method. Developers can use this to bypass the error
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ToContractObject``2(``1,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Some types, such as Dictionaries, won't be recognized as requiring
            the xml contract to deserialize so the ToObject has to crash 
            and be caught by the try/catch to use the last chance XmlToContractObject
            method. Developers can use this to bypass the error
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TS">The type of the S.</typeparam>
            <param name="source">The source.</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ToObject``2(``1,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize XML to an object.
            </summary>
            <remarks>
            <para>
            If the provided type is a DataContract, then the DataContractSerializer will be used,
            otherwise, the XmlSerializer will be used.
            </para>
            </remarks>
            <typeparam name="T">Type of object desired</typeparam>
            <typeparam name="TS">string or XmlReader</typeparam>
            <param name="source">Xml string or XmlReader that should be hydrated into the requested object type (T)</param>
            <param name="knownTypes">Hint for known Types being used in the Type of object to be deserialized</param>
            <returns>An object of type T hydrated from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.XmlToContractObject``2(``1,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize with a DataContractSerializer.
            </summary>
            <typeparam name="T">Type to deserialize with</typeparam>
            <typeparam name="TS">string or XmlReader</typeparam>
            <param name="source">Source to deserialize</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.XmlToObject``2(``1,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize with a XmlSerializer.
            </summary>
            <typeparam name="T">Type to deserialize with</typeparam>
            <typeparam name="TS">string or XmlReader</typeparam>
            <param name="source">Source to deserialize</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.UseDataContractSerializer(System.Object)">
            <summary>
            Determine if the provided object should use a DataContractSerializer for serialization.
            </summary>
            <param name="obj">The object to interrogate</param>
            <returns>true if a DataContractSerializer should be used for serialization.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.UseDataContractSerializer(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Determine if the type has the data contract attribute
            </summary>
            <param name="type">Object type that might be defined as a DataContractAttribute.</param>
            <returns>True if has data contract attribute, false otherwise</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.XmlToContractObject``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize with a DataContractSerializer.
            </summary>
            <typeparam name="T">Type to deserialize with</typeparam>
            <param name="xml">XML to deserialize</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.XmlToContractObject``1(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize with a DataContractSerializer.
            </summary>
            <typeparam name="T">Type to deserialize with</typeparam>
            <param name="reader">Reader to deserialize</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ContractObjectToXml``1(``0,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serialize with a DataContractSerializer.
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="obj">Object (datacontract) to serialize</param>
            <param name="encoding">Encoding to use</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be serialized</param>
            <returns>Xml representing the provided object</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.XmlToObject``1(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize with a XmlSerializer.
            </summary>
            <typeparam name="T">Type to deserialize with</typeparam>
            <param name="xml">XML to deserialize</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.XmlToObject``1(System.Xml.XmlReader,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Deserialize with a XmlSerializer.
            </summary>
            <typeparam name="T">Type to deserialize with</typeparam>
            <param name="reader">Reader to deserialize</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be deserialized</param>
            <returns>An object of type T from the provided xml</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.ObjectToXml``1(``0,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Serialize with a XmlSerializer.
            </summary>
            <typeparam name="T">Type to serialize</typeparam>
            <param name="obj">Object (datacontract) to serialize</param>
            <param name="encoding">Encoding to use</param>
            <param name="knownTypes">Hint for known Types being used in the Type to be serialized</param>
            <returns>Xml representing the provided object</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Convert string to byte array.
            </summary>
            <param name="str"></param>
            <param name="encoding">Desired encoding, or null for auto-determine</param>
            <returns>Byte array from string.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Convert bytes to string.
            </summary>
            <param name="bytes"></param>
            <param name="encoding">Desired encoding, or null for auto-determine</param>
            <returns>String from byte array.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.DetermineEncoding(System.Byte[])">
            <summary>
            Determine encoding of provided bytes.
            </summary>
            <param name="bytes"></param>
            <returns>Encoding found in first 4 bytes, otherwise UTF8.</returns>
        </member>
        <member name="M:Semio.Core.Helpers.SerializationHelper.DetermineEncoding(System.String)">
            <summary>
            Determine encoding of provided xml.
            </summary>
            <remarks>
            <para>
            NOTE: Potential exists for xml to provide declaration of wrong format.
            For example, if UTF-16 (Unicode) is declared, but string does not
            have unicode header bytes, something farther down the line may break
            when expects to find the Unicode header bytes.
            </para>
            </remarks>
            <param name="xml">Xml string</param>
            <returns>Encoding found in xml declaration, otherwise ASCII.</returns>
        </member>
        <member name="T:Semio.Core.Helpers.StreamHelper">
            <summary>
            Stream support utilities.
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.StreamHelper.GetBytes(System.IO.Stream)">
            <summary>
            Reads the specified stream and returns the result as a byte array.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.StreamHelper.GetString(System.IO.Stream)">
            <summary>
            Reads the specified stream and returns the result as a string, using the default encoding.
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.StreamHelper.ReadBinaryFile(System.String)">
            <summary>
            Returns the content of the specified file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.StreamHelper.ReadTextFile(System.String)">
            <summary>
            Returns the content of the specified file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.StreamHelper.WriteBinaryFile(System.String,System.Byte[])">
            <summary>
            Create or overwrite the specified binary file and output the supplied data.
            </summary>
            <param name="fileName"></param>
            <param name="data"></param>
        </member>
        <member name="M:Semio.Core.Helpers.StreamHelper.WriteTextFile(System.String,System.String)">
            <summary>
            Create or overwrite the specified text file and output the supplied data.
            </summary>
            <param name="fileName"></param>
            <param name="data"></param>
        </member>
        <member name="T:Semio.Core.Helpers.TypeHelper">
            <summary>
            Type conversion utilities guaranteed never to throw exceptions or return null.
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.IsDate(System.Object)">
            <summary>
            Returns true if the specified DateTime value is a valid Date with the year >= 1900.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.IsTime(System.Object)">
            <summary>
            Returns true if the specified DateTime value is a valid Time.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToBoolean(System.Object)">
            <summary>
            Convert the value to boolean if possible, otherwise return false.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToDateTime(System.Object)">
            <summary>
            //Convert the value to Date if possible, otherwise return new DateTime().
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToDouble(System.Object)">
            <summary>
            Convert the value to double if possible, otherwise return zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToDecimal(System.Object)">
            <summary>
            Convert the value to decimal if possible, otherwise return zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToInt(System.Object)">
            <summary>
            Convert the value to integer if possible, otherwise return zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToLong(System.Object)">
            <summary>
            Convert the value to long if possible, otherwise return zero.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToString(System.Object)">
            <summary>
            Convert the value to String if possible, otherwise return "".
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToString(System.Object,System.Int32)">
            <summary>
            Convert the value to String if possible, otherwise return "".
            Truncates strings longer than the specified length.
            </summary>
            <param name="value"></param>
            <param name="maximumLength"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToUint(System.Object)">
            <summary>
            Convert the value to unsigned integer if possible, otherwise return zero.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.TypeHelper.ToUlong(System.Object)">
            <summary>
            Convert the value to unsignedlong if possible, otherwise return zero.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.XmlHelper">
            <summary>
             XML support utilities.
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendAttribute(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Append an attribute to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendAttribute(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>
            Append an attribute to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendAttribute(System.Xml.XmlWriter,System.String,System.Int64)">
            <summary>
            Append an attribute to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendAttribute(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Append an attribute to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Nullable{System.Boolean})">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Decimal)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Byte[])">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Guid)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="guid"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Nullable{System.Int32})">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.AppendElement(System.Xml.XmlWriter,System.String,System.Xml.Linq.XElement)">
            <summary>
            Append an element to the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetAttributeBoolean(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed attribute from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetAttributeInt(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed attribute from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetAttributeLong(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed attribute from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetAttributeString(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed attribute from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetNamespaceManager(System.Xml.Linq.XDocument)">
            <summary>
            Create a new XmlNamespaceManager initialized by reading the namespace declaration from the attributes of the root node.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetBoolean(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns the boolean value at the specified XPath.
            </summary>
            <param name="element"></param>
            <param name="xpath"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetDateTime(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns the boolean value at the specified XPath.
            </summary>
            <param name="element"></param>
            <param name="xpath"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetGuid(System.Xml.XmlReader,System.String)">
            <summary>
            Returns the Guid value at the specified XPath.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetString(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns the string value at the specified XPath.
            </summary>
            <param name="element"></param>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetString(System.Xml.Linq.XElement,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Returns the string value at the specified XPath.
            </summary>
            <param name="element"></param>
            <param name="xpath"></param>
            <param name="resolver"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetBoolean(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetDateTime(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetDecimal(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetImage(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetInt(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetLong(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetNullableInt(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetString(System.Xml.XmlReader,System.String)">
            <summary>
            Get a typed value from the current element in a <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetBytes(System.Byte[],System.Xml.XmlReader,System.String)">
            <summary>
            Reads the current element to skip it --Reads an element as an array of bytes into a provided array
            </summary>
            <param name="bytes">Byte array to fill from the reader</param>
            <param name="reader">XmlReader to be read from</param>
            <param name="name">Name of the element to be read</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.GetXml(System.Xml.XmlReader,System.String)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.Serialize(System.Object)">
            <summary>
            Serialize the specified object to XML.
            The object must implement IXmlSerializable.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.Deserialize(System.Type,System.String)">
            <summary>
            Deserialize the specified object.  The object must implement IXmlSerializable.
            </summary>
            <param name="type"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.Deserialize(System.Xml.Serialization.IXmlSerializable,System.Xml.Linq.XDocument)">
            <summary>
            Deserialize the specified object.
            </summary>
            <param name="obj"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.Deserialize(System.Xml.Serialization.IXmlSerializable,System.Xml.XmlDocument)">
            <summary>
            Deserialize the specified object.
            </summary>
            <param name="obj"></param>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.XmlHelper.Deserialize(System.Xml.Serialization.IXmlSerializable,System.String)">
            <summary>
            Deserialize the specified object.
            </summary>
            <param name="obj"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Interfaces.IData">
            <summary>
            Data object interface
            </summary>
        </member>
        <member name="M:Semio.Core.Interfaces.IData.GetData``1">
            <summary>
            Gets the data strongly typed.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Semio.Core.Interfaces.IData.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Semio.Core.Interfaces.IDIContainer">
            <summary>
            Dependency Injection Container
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IDIContainer.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="T:Semio.Core.Interfaces.IEvents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Interfaces.IEvents.DoEvents">
            <summary>
            Does the events.
            </summary>
        </member>
        <member name="T:Semio.Core.Interfaces.IFacet">
            <summary>
            A facet represents a [TODO: Finish description]. This interface 
            represents the contract that any implementation of a facet
            must guarantee. The reason why this is necessary
            is because different modules may have different 
            implementations of the concept of a facet.
            </summary>
        </member>
        <member name="M:Semio.Core.Interfaces.IFacet.GetValues">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Semio.Core.Interfaces.IFacetValue"/>.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacet.Id">
            <summary>
            The ID value for the IFacet.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacet.ToolTip">
            <summary>
            Contains the tootip of header and sub-header for an IFacet.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacet.Display">
            <summary>
            Contains the header text for a IFacet.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacet.Display2">
            <summary>
            Contains the sub-header text for an IFacet.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacet.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacet.IsPath">
            <summary>
             Gets or sets a value indicating if the facet value is a path
            </summary>
        </member>
        <member name="T:Semio.Core.Interfaces.IFacetValue">
            <summary>
            A value for a <see cref="T:Semio.Core.Interfaces.IFacet"/>. This interface 
            represents the contract that any implementation of a facet
            value must guarantee. The reason why this is necessary
            is because different modules may have different 
            implementations of the concept of a facet value.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacetValue.Id">
            <summary>
            The Id of the facet value.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacetValue.Value">
            <summary>
            The value that the facet value represents.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacetValue.Frequency">
            <summary>
            The number of occurances found of this value in the dataset.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacetValue.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>"include" or "exclude"</value>
        </member>
        <member name="P:Semio.Core.Interfaces.IFacetValue.Group">
            <summary>
            The group level to which this facet belongs.
            <example>Examples: "L1", "L2", "L3", ...</example>
            </summary>
        </member>
        <member name="T:Semio.Core.Interfaces.IProcessed">
            <summary>
            Interface for IsProcessed Flag
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.IProcessed.IsProcessed">
            <summary>
            Gets or sets a value indicating whether this instance is processed.
            </summary>
            <value>
            	<c>true</c> if this instance is processed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Semio.Core.Interfaces.ISavedArtifact">
            <summary>
            Represents a saved piece of data. This interface 
            represents the contract that any implementation of a
            saved artifact must guarantee. 
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.Id">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <value>The author.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.Annotation">
            <summary>
            Gets or sets the annotation.
            </summary>
            <value>The annotation.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.RelatedLinks">
            <summary>
            A table that contains all of the available links
            related to this artifact.
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.File">
            <summary>
            Gets or sets the file.
            </summary>
            <value>The file.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.FileContentType">
            <summary>
            Gets or sets the file content-type (MIME type)
            </summary>
            <value>The MIME type (ex: "image/jpeg" or Semio.Common.Restful.ContentTypes.ContentTypeJpeg)</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifact.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>       
        </member>
        <member name="T:Semio.Core.Interfaces.ISavedArtifactLink">
            <summary>
            
            </summary>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifactLink.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifactLink.RelationshipType">
            <summary>
            Gets the type of the relationship.
            </summary>
            <value>The type of the relationship.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifactLink.Title">
            <summary>
            Gets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifactLink.ContentType">
            <summary>
            Gets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Semio.Core.Interfaces.ISavedArtifactLink.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Semio.Core.Loggers.SLog4Wpf">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLog4Wpf.EstablishLogger">
            <summary>
            Establish a new logger with new context.
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLog4Wpf.DispatcherUnhandledExceptionHandler(System.Exception,System.String,System.String)">
            <summary>
            Uniform exception handling
            </summary>
            <param name="ex">The caught exception</param>
            <param name="userMessage">Overall message to prefix result with (optional, may be null)</param>
            <param name="caption">The caption.</param>
            <returns>
            true if exception should be marked as handled, false if exception needs to be re-thrown
            </returns>
        </member>
        <member name="T:Semio.Core.Loggers.Interfaces.ISLogContextInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogContextInfo.GetUser">
            <summary>
            Gets the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogContextInfo.GetThreadContextDataMgr">
            <summary>
            Gets the thread context data MGR.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr.SetCurrentSLogger(Semio.Core.Loggers.SLogger)">
            <summary>
             Save SLogger for later retrieval
            </summary>
            <param name="slogger">SLogger to save on thread</param>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr.GetCurrentSLogger">
            <summary>
             Retrieve SLogger for use.
            </summary>
            <returns>SLogger for thread</returns>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr.SetData(System.String,System.String)">
            <summary>
            Sets the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr.GetData(System.String)">
            <summary>
            Gets the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Loggers.Interfaces.ISLogWebContextInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogWebContextInfo.GetUrl">
            <summary>
            Gets the URL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Loggers.Interfaces.ISLogWebContextInfo.GetMethod">
            <summary>
            Gets the method.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Loggers.ISLoggable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Semio.Core.Loggers.ISLoggable.SLogCategory">
            <summary>
            Gets the S log category.
            </summary>
            <value>The S log category.</value>
        </member>
        <member name="P:Semio.Core.Loggers.ISLoggable.EventId">
            <summary>
            Gets the event id.
            </summary>
            <value>The event id.</value>
        </member>
        <member name="T:Semio.Core.Loggers.SLog4UnitTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLog4UnitTest.EstablishLogger(System.Boolean)">
            <summary>
            Establish a new logger with new context.
            </summary>
        </member>
        <member name="T:Semio.Core.Loggers.SLogExeContextInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLogExeContextInfo.GetUser">
            <summary>
            Gets the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogExeContextInfo.GetThreadContextDataMgr">
            <summary>
            Gets the thread context data MGR.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Loggers.SLogger">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.SLogger.CallContextKey_SLoggerCurrent">
            <summary>
            Used for data stored in the thread-based context.
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.SLogger._activityId">
             <summary>
             Identifier used to track activity (or transactions) across user requests and
             across machines in a distributed environment.
             </summary>
            
             <remarks>
             <para>
             For example, this Id should accompany all web service calls so that they may
             log the same activity id.
             </para>
             </remarks>
        </member>
        <member name="F:Semio.Core.Loggers.SLogger._user">
            <summary>
            Identifier used to track the current user, whose behalf the program is workin on.
            </summary>
            
            <remarks>
            <para>
            The user string will be logged with all log messages through the distributed
            environment. For example, the user string should accompany all web service calls
            so that they may log the same user.
            </para>
            </remarks>
        </member>
        <member name="F:Semio.Core.Loggers.SLogger._contextEnabled">
            <summary>
            Overall API enable flag
            </summary>
            <remarks>
            Must default to true to support non-initialized SLogger calls. This allows use of
            SLogger without calling EstablishLogger(). See implentation in the Current property.
            </remarks>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.#ctor">
            <summary>
            Constructor that sets up a logging object.
            </summary>
            
            <remarks>
            <para>
            Instantiating a logger allows it to remember its own context so that it may add
            the established state (ex: current user) to each log message created.
            </para>
            <para>
            This is internal to avoid unexpected use case scenarios.
            </para>
            </remarks>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.#ctor(System.String,System.String)">
            <summary>
            Constructor that sets up a logging object.
            </summary>
            
            <remarks>
            <para>
            Instantiating a logger allows it to remember its own context so that it may add
            the established state (ex: current user) to each log message created.
            </para>
            <para>
            This is internal to avoid unexpected use case scenarios.
            </para>
            </remarks>
            
            <param name="username">The current user (for an application) or on whose behalf the
            code is running (for a web service or other distributed component).</param>
            <param name="activityId">ActivityId, for restoring a saved one
            (not establishing a new one)</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.#ctor(System.String)">
            <summary>
            Constructor that sets up a logging object.
            </summary>
            
            <remarks>
            <para>
            Instantiating a logger allows it to remember its own context so that it may add
            the established state (ex: current user) to each log message created.
            </para>
            <para>
            This is internal to avoid unexpected use case scenarios.
            </para>
            </remarks>
            
            <param name="username">The current user (for an application) or on whose behalf the
            code is running (for a web service or other distributed component).</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.EstablishNoLogger">
            <summary>
            Establish that NO logging should occur.
            </summary>
            
            <example>
            <code>
            SLogger.EstablishNoLogger();
            </code>
            </example>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.EstablishLogger(System.String)">
            <summary>
            Create a logger with the provided identity name.
            </summary>
            
            <remarks>
            <para>A SLogger must be established once the user can be determined, and reestablished
            if the user changes.</para>
            <para>Each time this is called, a new ActivityId is established.
            As a result, this should be called once, and early, in the worker thread's existance.</para>
            </remarks>
            
            <example>
            <code>
            SLogger.EstablishLogger(@"QAMR-ACCOUNTS\Q714211");
            </code>
            </example>
            
            <param name="qualifiedusername">Fully qualified username, such as @"QAMR-ACCOUNTS\Q714211"</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.EstablishLogger(Semio.Core.Loggers.Interfaces.ISLogContextInfo)">
            <summary>
            Create a logger with the passed context.
            </summary>
            <param name="contextInfo">Context information</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.EstablishLogger(Semio.Core.Loggers.Interfaces.ISLogWebContextInfo)">
            <summary>
            Create a logger with the passed web context.
            </summary>
            
            <example>
            Get a logger based on web context.
            <code>
                SLogger.EstablishLogger(new SLogWebContextInfo());
            </code>
            </example>
            
            <param name="webContextInfo">Accessor for web information</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.EstablishLogger(System.String,Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr)">
            <summary>
            Create a logger with the provided identity name and context manager
            </summary>
            
            <remarks>
            <para>A SLogger must be established once the user can be determined, and reestablished
            if the user changes.</para>
            <para>Each time this is called, a new ActivityId is established.
            As a result, this should be called once, and early, in the worker thread's existance.</para>
            </remarks>
            
            <example>
            <code>
            SLogger.EstablishLogger(@"QAMR-ACCOUNTS\Q714211");
            </code>
            </example>
            
            <param name="qualifiedusername">Fully qualified username, such as @"QAMR-ACCOUNTS\Q714211"</param>
            <param name="contextDataMgr">Context data manager, assumes SLogExeThreadContextDataMgr if null.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.StowConstructorProperties">
            <summary>
            Keep basic properties around for later retrieval (if a SLogger needs
            to be recreated)
            </summary>
            <remarks>
            If the process spawns a new thread, this information will be needed
            to generate a new SLogger based on the other thread's properties.
            </remarks>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.CreateFromStowedConstructorProperties">
            <summary>
            Establish a new SLogger from properties inherited on the thread
            (from the parent thread).
            </summary>
            <returns>SLogger object if properties exist, otherwise null.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.IsDebugEnabled">
            <summary>
            Determine if Debug logging is configured as enabled.
            </summary>
            <returns>true if Debug messages will be stored/handled, false otherwise.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.LogStatus(Semio.Core.Loggers.Types.SLogCategory,System.Diagnostics.TraceEventType,System.Enum,Semio.Core.Loggers.Types.SLogPriority,System.Object,Semio.Core.Loggers.SLogger.MessageDelegate,System.Exception)">
            <summary>
            Log a Status message with the provided details.
            </summary>
            
            <remarks>
            <para>All status messages are double classified as "Status" and then the sub-type
            (ex: Information)</para>
            </remarks>
            
            <param name="category">Category from SLogCategory that will be configured as a
            Category Source in EntLib.</param>
            <param name="severity">Severity from TraceEventType to describe how important the message is.</param>
            <param name="eventId">A numeric value used as a sub-category.</param>
            <param name="priority">Priority from SLogPriority to describe how important the message is to the business.</param>
            <param name="message">Any message object, will call message.ToString() to get string.</param>
            <param name="messageDelegate">Delegate that returns a message string. If not null, used for message.</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.LogDebug(System.Object,Semio.Core.Loggers.SLogger.MessageDelegate,System.Exception)">
            <summary>
            Log a Debug message.
            </summary>
            
            <param name="message">Any message string. Overridden by messageDelegate.</param>
            <param name="messageDelegate">Delegate that returns a message string. If not null, used for message.</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.LogDebugPoint(System.Object,System.String,System.Exception)">
            <summary>
            Log a DebugPoint message.
            </summary>
            
            <param name="message">Any message string. Overridden by messageDelegate.</param>
            <param name="debugId">null or any string that can be used to quickly locate the message,
            for instance in a large log file. The developers name, a problem ticket id, or other unique string
            may be good choices.</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.NewDebugLogEntry">
            <summary>
            Create a basic debug log entry.
            </summary>
            
            <remarks>
            <para>
            This is used to create a minimally populated log entry that can be used to determine
            whether debug logging is actually enabled. Once logging is determined to be enabled,
            the rest of the log entry should be filled in, and the message should be sent on for
            full processing.
            </para>
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.LogAudit(Semio.Core.Loggers.Types.SLogAuditResult,Semio.Core.Loggers.Types.SLogAuditAction,System.String)">
            <summary>
            Log an audit message with the provided details.
            </summary>
            
            <remarks>
            <para>Audit messages should log events "post authorization audit, pre data-access."
            This is merely a logging mechanism, so it will want to log that the user was granted
            or denied access to the action (which means post authorization). Additionally, the
            audit message must be logged (recording the action) regardless of whether the data
            access attempt actually succeeded (which means pre data-access).</para>
            </remarks>
            
            <example>
            <code>
                SLogger.Audit(
                    QAuditResult.Grant,
                    QAuditAction.Login,
                    "QPE"
                );
                SLogger.Audit(
                    QAuditResult.Deny,
                    QAuditAction.Delete,
                    "Patient Record: " + record.ID
                );
            </code>
            </example>
            
            <param name="result">The authorization determination Grant or Deny.</param>
            <param name="action">The action being attempted. Ex: Delete.</param>
            <param name="actionContext">What context or entity was the action being performed on? Ex: "Patient Record: " + record.ID</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.DebugPoint(System.Object,System.String)">
            <summary>
            Log a temporary "point Debugging" message.
            </summary>
            
            <remarks>
            <para>
            Point debugging is used when a specific need arises, and the developer uses a very purposeful
            (but temporary) "writeline" debugging style to find the problem code. Those lines need to be
            easily found in the log file, so the debugId is used to inject a unique string (like their name).
            After the problem is found/solved, these "point debugging" statements need to be removed.
            The method name, and the Warnings help point out lines dedicated to this approach, and suggests
            that they now be removed.
            </para>
            <para>
            This method should only be used for calls that will be removed before code promotion.
            Leaving calls to this method in promoted code would produce too much text in the
            log file and actually make it more difficult for developers and support personnel to
            find relevant log messages.
            </para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="debugId">Any string that can be used to quickly locate the message, for instance in
            a large log file. The developers name, a problem ticket id, or other unique string may be good
            choices.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.DebugPoint(System.Object,System.String,System.Exception)">
            <summary>
            Log a temporary "point Debugging" message.
            </summary>
            
            <remarks>
            <para>
            Point debugging is used when a specific need arises, and the developer uses a very purposeful
            (but temporary) "writeline" debugging style to find the problem code. Those lines need to be
            easily found in the log file, so the debugId is used to inject a unique string (like their name).
            After the problem is found/solved, these "point debugging" statements need to be removed.
            The method name, and the Warnings help point out lines dedicated to this approach, and suggests
            that they now be removed.
            </para>
            <para>
            This method should only be used for calls that will be removed before code promotion.
            Leaving calls to this method in promoted code would produce too much text in the
            log file and actually make it more difficult for developers and support personnel to
            find relevant log messages.
            </para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="debugId">Any string that can be used to quickly locate the message, for instance in
            a large log file. The developers name, a problem ticket id, or other unique string may be good
            choices.</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Debug(System.Object)">
            <summary>
            Log a Debug message.
            </summary>
            
            <param name="message">Any message string.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Debug(System.Object,System.Enum)">
            <summary>
            Log a Debug message.
            </summary>
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Debug(Semio.Core.Loggers.SLogger.MessageDelegate)">
            <summary>
            Log a Debug message, with deferred message computation.
            </summary>
            
            <example>
            <code>
            _log.Debug(delegate()
                {
                    string bigDebugContext = BuildBigDebugContextString();
                    return "performance expensive debug context: " + bigDebugContext;
                }
            );
            </code>
            </example>
            
            <param name="messageDelegate">Delegate that returns a message string.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Debug(System.Object,System.Exception)">
            <summary>
            Log a Debug message.
            </summary>
            
            <param name="message">Any message string.</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Debug(Semio.Core.Loggers.SLogger.MessageDelegate,System.Exception)">
            <summary>
            Log a Debug message, with deferred message computation.
            </summary>
            
            <example>
            <code>
            _log.DebugPoint(delegate()
                {
                    string bigDebugContext = BuildBigDebugContextString();
                    return "performance expensive debug context: " + bigDebugContext;
                },
                ex
            );
            </code>
            </example>
            
            <param name="messageDelegate">Delegate that returns a message string.</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Information(Semio.Core.Loggers.SLogger.MessageDelegate,Semio.Core.Loggers.Types.SLogEventId)">
            <summary>
            Log an Information message.
            </summary>
            
            <remarks>
            <para>Information messages record any useful non-warning and non-error events. Debug messages
            are lower priority/severity, so Information messages may be logged in production while
            Debug messages probably won't. To avoid having the system log too many information messages,
            confine use of this to recording high level program activity and system state. Generally
            record "what the system is doing" rather than implementation details such as loops, counters,
            etc...</para>
            </remarks>
            
            <param name="messageDelegate">Delegate that returns a message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Information(Semio.Core.Loggers.SLogger.MessageDelegate,System.Enum)">
            <summary>
            Log an Information message.
            </summary>
            
            <remarks>
            <para>Information messages record any useful non-warning and non-error events. Debug messages
            are lower priority/severity, so Information messages may be logged in production while
            Debug messages probably won't. To avoid having the system log too many information messages,
            confine use of this to recording high level program activity and system state. Generally
            record "what the system is doing" rather than implementation details such as loops, counters,
            etc...</para>
            </remarks>
            
            <param name="messageDelegate">Delegate that returns a message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Information(System.Object,Semio.Core.Loggers.Types.SLogEventId)">
            <summary>
            Log an Information message.
            </summary>
            
            <remarks>
            <para>Information messages record any useful non-warning and non-error events. Debug messages
            are lower priority/severity, so Information messages may be logged in production while
            Debug messages probably won't. To avoid having the system log too many information messages,
            confine use of this to recording high level program activity and system state. Generally
            record "what the system is doing" rather than implementation details such as loops, counters,
            etc...</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Information(System.Object,System.Enum)">
            <summary>
            Log an Information message.
            </summary>
            
            <remarks>
            <para>Information messages record any useful non-warning and non-error events. Debug messages
            are lower priority/severity, so Information messages may be logged in production while
            Debug messages probably won't. To avoid having the system log too many information messages,
            confine use of this to recording high level program activity and system state. Generally
            record "what the system is doing" rather than implementation details such as loops, counters,
            etc...</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Warning(System.Object,Semio.Core.Loggers.Types.SLogEventId)">
            <summary>
            Log a Warning message.
            </summary>
            
            <remarks>
            <para>Warning messages record any potentially problematic situations. They should warn of
            situations that might become problems, such as failures that can be safely retried.
            Other self-correcting situations may be useful warnings to log as they may help convey
            that the system is starting to have scaling issues, or dependant services are starting to
            become unreliable.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Warning(System.Object,System.Enum)">
            <summary>
            Log a Warning message.
            </summary>
            
            <remarks>
            <para>Warning messages record any potentially problematic situations. They should warn of
            situations that might become problems, such as failures that can be safely retried.
            Other self-correcting situations may be useful warnings to log as they may help convey
            that the system is starting to have scaling issues, or dependant services are starting to
            become unreliable.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Warning(System.Object,Semio.Core.Loggers.Types.SLogEventId,System.Exception)">
            <summary>
            Log a Warning message.
            </summary>
            
            <remarks>
            <para>Warning messages record any potentially problematic situations. They should warn of
            situations that might become problems, such as failures that can be safely retried.
            Other self-correcting situations may be useful warnings to log as they may help convey
            that the system is starting to have scaling issues, or dependant services are starting to
            become unreliable.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Warning(System.Object,System.Enum,System.Exception)">
            <summary>
            Log a Warning message.
            </summary>
            
            <remarks>
            <para>Warning messages record any potentially problematic situations. They should warn of
            situations that might become problems, such as failures that can be safely retried.
            Other self-correcting situations may be useful warnings to log as they may help convey
            that the system is starting to have scaling issues, or dependant services are starting to
            become unreliable.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Error(System.Object,Semio.Core.Loggers.Types.SLogEventId,System.Exception)">
            <summary>
            Log an Error message.
            </summary>
            
            <remarks>
            <para>Error messages record real problem situations. They should log situations that have
            become problems, such as failures that cannot not be safely retried, uncompleted operations
            or otherwise gracefully recovered from. After an error, the user may likely end up back at
            the beginning of a workflow, may not be-able to make progress, or may even completely lose
            their ability to use the application itself.</para>
            <para>All error situations will need to be addressed by support personnel and may require
            server maintenance, possibly even code changes, to resolve.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Error(System.Object,System.Enum,System.Exception)">
            <summary>
            Log an Error message.
            </summary>
            
            <remarks>
            <para>Error messages record real problem situations. They should log situations that have
            become problems, such as failures that cannot not be safely retried, uncompleted operations
            or otherwise gracefully recovered from. After an error, the user may likely end up back at
            the beginning of a workflow, may not be-able to make progress, or may even completely lose
            their ability to use the application itself.</para>
            <para>All error situations will need to be addressed by support personnel and may require
            server maintenance, possibly even code changes, to resolve.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
            <param name="ex">null or an exception</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Error(System.Object,Semio.Core.Loggers.Types.SLogEventId)">
            <summary>
            Log an Error message.
            </summary>
            
            <remarks>
            <para>Error messages record real problem situations. They should log situations that have
            become problems, such as failures that cannot not be safely retried, uncompleted operations
            or otherwise gracefully recovered from. After an error, the user may likely end up back at
            the beginning of a workflow, may not be-able to make progress, or may even completely lose
            their ability to use the application itself.</para>
            <para>All error situations will need to be addressed by support personnel and may require
            server maintenance, possibly even code changes, to resolve.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Error(System.Object,System.Enum)">
            <summary>
            Log an Error message.
            </summary>
            
            <remarks>
            <para>Error messages record real problem situations. They should log situations that have
            become problems, such as failures that cannot not be safely retried, uncompleted operations
            or otherwise gracefully recovered from. After an error, the user may likely end up back at
            the beginning of a workflow, may not be-able to make progress, or may even completely lose
            their ability to use the application itself.</para>
            <para>All error situations will need to be addressed by support personnel and may require
            server maintenance, possibly even code changes, to resolve.</para>
            </remarks>
            
            <param name="message">Any message string.</param>
            <param name="eventId">Enumeration whose numeric value will be used as the numeric EventId</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Audit(System.Boolean,Semio.Core.Loggers.Types.SLogAuditAction,System.String)">
             <summary>
             Log an audit message with the provided details.
             </summary>
             
             <remarks>
             <para>Audit messages should log events "post authorization audit, pre data-access."
             This is merely a logging mechanism, so it will want to log that the user was granted
             or denied access to the action (which means post authorization). Additionally, the
             audit message must be logged (recording the action) regardless of whether the data
             access attempt actually succeeded (which means pre data-access).</para>
             </remarks>
             
             <example>
             <code>
             private DataSet LoadPatientVisits(Guid id)
             {
                 string actionContext = "Patient visits for patient: " + id;
            
                 // Authorization
                 bool authorized = UserIsAuthorized(PATIENT_VISITS_POLICY);
            
                 SLogger.Audit(
                     authorized,
                     SLoggerAction.Read_CONTEXT,
                     actionContext);
                   
                 if (!authorized)
                 {
                     throw new AuthException(actionContext);
                 }
            
                 // Data Access
                 Dataset ds;
                 // ... load data...
                 return ds;
             }
             </code>
             </example>
             
             <param name="authorized">True if user is authorized to perform function,
             false otherwise.</param>
             <param name="action">The action being attempted. Ex: Delete.</param>
             <param name="actionContext">What context or entity was the action being
             performed on? Ex: "Patient Record: " + record.ID</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Audit(System.Boolean,Semio.Core.Loggers.Types.SLogAuditAction)">
             <summary>
             Log an audit message with the provided details.
             </summary>
             
             <remarks>
             <para>Audit messages should log events "post authorization audit, pre data-access."
             This is merely a logging mechanism, so it will want to log that the user was granted
             or denied access to the action (which means post authorization). Additionally, the
             audit message must be logged (recording the action) regardless of whether the data
             access attempt actually succeeded (which means pre data-access).</para>
             </remarks>
             
             <example>
             <code>
             private void AttemptLogin(Guid id)
             {
                 // Authorization
                 bool authorized = UserLogin();
            
                 SLogger.Audit(
                     authorized,
                     SLoggerAction.Login);
                   
                 if (!authorized)
                 {
                     throw new LoginException();
                 }
             }
             </code>
             </example>
             
             <param name="authorized">True if user is authorized to perform function,
             false otherwise.</param>
             <param name="action">The action being attempted. Ex: Login.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Reset">
            <summary>
            Reset the SLogger.
            Note: Will require another call to EstablishLogger()
            Note: May be used to change the logging directory with SetLogDirEnvVar()
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.SetLogDirEnvVar(System.String)">
            <summary>
            Easy way to affect output directory of log file.
            Config file must utilize the "%LOGDIR%" environment variable in a fashion like this:
                 &lt;add fileName="%LOGDIR%\all.log" [..]
            </summary>
            <param name="path">Full path to desired location for output files, or relative path from current directory.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.EnsuredThreadContextDataMgr(Semio.Core.Loggers.Interfaces.ISLogThreadContextDataMgr)">
            <summary>
            Ensure a usable ThreadContextDataMgr. Default to "Exe" version if null is passed.
            </summary>
            <param name="contextDataMgr"></param>
            <returns>contextDataMgr if not null, otherwise new SLogExeThreadContextDataMgr()</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.AddFullException(Semio.Core.Loggers.Types.SLogEntry,System.Exception)">
            <summary>
            Add the full exception details to the log entry.
            </summary>
            
            <param name="log">QLogEntry message for logging</param>
            <param name="ex">null or an exception (which may have an assigned InnerException)</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.GetExceptionString(System.Int32,System.Exception)">
            <summary>
            Create one string for a level of exception details.
            </summary>
            
            <param name="level">Nesting level</param>
            <param name="ex">null or an exception (which may have an assigned InnerException)</param>
            <returns>String for logging this one exception</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.StripCrLf(System.String)">
            <summary>
            Strip/Replace Cr/Lf values from the passed string.
            </summary>
            
            <param name="str">String that may have embedded \r and \n characters.</param>
            <returns>String with "... " type notation instead of \r and \n characters.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.AddImplicitContext(Semio.Core.Loggers.Types.SLogEntry)">
            <summary>
            Add implicit context.
            </summary>
            
            <remarks>
            <para>
            Add any context that can be inferred from saved state or system examination.
            </para>
            </remarks>
            <param name="log">Log entry to add context to.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.ResolveMessageDelegate(Semio.Core.Loggers.SLogger.MessageDelegate)">
            <summary>
            Resolve the messageDelegate safely to prevent system failure on logging failure.
            </summary>
            <param name="messageDelegate">Delegate that returns a message string. If not null, used for message.</param>
            <returns>Message from delegate, or standard error message if delegate fails.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.Write(Microsoft.Practices.EnterpriseLibrary.Logging.LogEntry)">
            <summary>
            Actually push the LogEntry to EntLib dispatch.
            </summary>
            <param name="log">Log entry to write into EntLib</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.SetCurrentSLogger(Semio.Core.Loggers.SLogger)">
            <summary>
             Save SLogger for later retrieval
            </summary>
            <param name="slogger">SLogger to save on thread</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.GetCurrentSLogger">
            <summary>
             Retrieve SLogger for use.
            </summary>
            <returns>SLogger for thread</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.SetContextData(System.String,System.String)">
            <summary>
            Put a value into the thread's global context.
            </summary>
            <remarks>
            <para>This uses truely global context for storage. The keys must use a unique namespace
            to avoid collisions with data from other applications. Ex: Prefix everything relevant
            to SLogger with "Semio.Common.SLogger."</para>
            </remarks>
            <param name="key">Key for value which must have proper namespace for avoiding collisions with other keys.</param>
            <param name="value">Value to store with key.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.GetContextData(System.String)">
            <summary>
            Get a value from the thread's global context.
            </summary>
            <param name="key">Key used in SetContextData()</param>
            <returns>object stored from SetContextData()</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.AuditActionContextMarker(Semio.Core.Loggers.Types.SLogAuditAction)">
            <summary>
            Look for actionContext marker. This will signify that the actionContext MUST be provided to Audit().
            </summary>
            <remarks>
            <para>The context marker is the end of the QAuditAction Enum string that begins with "_" and is
            only uppercase characters.</para>
            <example>
            If action = QAuditAction.Create_CONTEXT, then "_CONTEXT" is the context marker.
            </example>
            <example>
            If action = QAuditAction.Read_RESOURCE, then "_RESOURCE" is the context marker.
            </example>
            </remarks>
            <param name="action">Enum from QAuditAction.</param>
            <returns>The last portion of the string, including the "_" of upper case characters, null otherwise.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.AuditActionDisplay(Semio.Core.Loggers.Types.SLogAuditAction)">
            <summary>
            Massage the action string into one worth putting into the log file.
            </summary>
            <remarks>
            <para>This merely removes the context marker.</para>
            </remarks>
            <param name="action">Enum from QAuditAction.</param>
            <returns>The Enum string without the context marker.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.AuditActionDisplay(Semio.Core.Loggers.Types.SLogAuditAction,System.String)">
            <summary>
            Massage the action string into one worth putting into the log file.
            </summary>
            <remarks>
            <para>This merely removes the context marker.</para>
            </remarks>
            <param name="action">Enum from QAuditAction.</param>
            <param name="marker">The pre-computed context marker.</param>
            <returns>The Enum string without the context marker.</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogger.WriteToOutput(Semio.Core.Loggers.Types.SLogCategory,Semio.Core.Loggers.Types.SLogEntry)">
            <summary>
            Write details to other output streams.
            </summary>
            <param name="category"></param>
            <param name="log"></param>
        </member>
        <member name="P:Semio.Core.Loggers.SLogger.User">
            <summary>
            The User name
            </summary>
            <remarks>
            <para>
            This is internal to avoid unexpected use case scenarios.
            </para>
            </remarks>
        </member>
        <member name="P:Semio.Core.Loggers.SLogger.ThreadContextDataMgr">
            <summary>
            The ThreadContextData "manager"
            </summary>
            <remarks>
            <para>
            This is internal to avoid unexpected use case scenarios.
            </para>
            </remarks>
        </member>
        <member name="P:Semio.Core.Loggers.SLogger.WebContextInfo">
            <summary>
            The WebContextInfo "manager"
            </summary>
            <remarks>
            <para>
            This is internal to avoid unexpected use case scenarios.
            </para>
            </remarks>
        </member>
        <member name="P:Semio.Core.Loggers.SLogger.Current">
            <summary>
            Get the current SLogger from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
            that was established by EstablishLogger().
            </summary>
            <value>The current.</value>
            <remarks>
            	<para>
            The SLogger must be accessible for certain modules, such as the Exception
            Handling framework. The SLogger should be established by SLogger.EstablishLogger()
            then may be used by the static methods in SLogger.
            </para>
            	<para>
            WARNING: If SLogger.EstablishLogger() is NOT called, SLogger.Current may inadvertently
            reuse/recycle the SLogger from the previous thread. This would be VERY bad if/when
            the SLogger is used for Audit events (which may be assigned to the wrong user).
            This will likely be caught in development or testing since the simplified
            environment would probably have one thread, and not calling SLogger.EstablishLogger()
            would result in null, which is when this throws a NotSupportedException. Note that
            this is a theoretical scenario that MAY occur, under certain conditions in ASP.NET.
            </para>
            </remarks>
        </member>
        <member name="T:Semio.Core.Loggers.SLogger.MessageDelegate">
            <summary>
            Delegate for deferring creation of message string until needed.
            </summary>
            
            <remarks>
            Creation of message string may be too costly an operation in some cases, so this
            allows the creation logic to wait until it is determined that debug messages
            actually will be logged.
            </remarks>
            
            <example>
            <code>
            
            // API method
            public static void Debug(MessageDelegate messageDelegate);
            
            // Use
            Debug(delegate()
                {
                    string bigDebugContext = BuildBigDebugContextString();
                    return "performance expensive debug context: " + bigDebugContext;
                }
            );
            </code>
            </example>
            
            <returns>Message string to log.</returns>
        </member>
        <member name="T:Semio.Core.Loggers.SLoggerUnity">
            <summary>
            TODO: Complete, test and vet this class.
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLoggerUnity.#ctor(Semio.Core.Loggers.Interfaces.ISLogContextInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.Loggers.SLoggerUnity"/> class.
            </summary>
            <param name="contextInfo">The context info.</param>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogAuditAction">
            <summary>
            Audit actions across all contexts.
            </summary>
            
            <remarks>
            <para>The action is the activity being performed on something, the actionContext is what that
            action is being performed on.</para>
            <para>In some cases, the action does not make sense without context. Generally think of the
            action as the verb, and the action context as the noun. The "_CONTEXT" suffix indicates that
            an action context must be passed to the SLogger.Audit() method. Actually, any context marker
            that starts with "_", and ends with ONLY uppercase characters will denote that the action
            context must be passed. For example, if both "View_RESOURCE" and "Read_CONTEXT" existed,
            they would both require an action context to be passed to SLogger.Audit(). Note that the
            context marker strings (ex: "_RESOURCE" or "_CONTEXT") will be removed when writing them
            to the log (ex: an action of "View" or "Read" would be put into the log).</para>
            
            <para>The numbers associated with these action enums are used to compute the eventId inside
            SLogger. The eventId will be computed as the unique combination of the Security EventId
            with the action chosen below, and the authorized flag. All these are provided to the
            SLogger.Audit() method. The algorithm in pseudo code is:
            <code>
            eventId = SLogEventId.Security + (QAuditAction * 2) (+ 1 if deny)
            </code>
            The real code from SLogger.cs is:
            <code>
            int eventId = Convert.ToInt32(SLogEventId.Security) + (Convert.ToInt32(action) * 2) + ((result == QAuditResult.Grant) ? 0 : 1);
            </code>
            </para>
            
            <para>The Audit values should not be changed, or the application will log with different
            eventId standards than the rest of the enterprise. Any changes need to be coordinated
            and in consideration of existing applications already using these standards. Removing
            an entry, and reusing that number for another Enum will also cause confusion if any
            systems are utilizing the old code/number. Only a recompile of each application will
            find and resolve issues related to changes herein.</para>
            
            <para>The Audit values should remain low numbers to prevent collision with the
            bounding range in SLogEventId. The result of the algorithm shown above should not
            yield any values above 5999. In practicality, this means the QAuditAction values
            should be assigned in sequence up to 499. For example: 5000 + (499 * 2) + 1 = 5999.
            Best practice is to not reuse numbers, add new entries in sequence (don't skip numbers),
            and comment out old enums no longer in use. Recompiling applications may show that
            an old enum is still in use, and may need to be restored.</para>
            
            </remarks>
            
            <example>
            Notice the update (QAuditAction.Update_CONTEXT) is being performed
            on Patient Record 12345 (the actionContext). In the authorized case, the log would show a
            message of "Grant Update Patient Record: 12345" (note that "_CONTEXT" was removed from "Update").
            <code>
                int patientId = 12345;
                string actionContext = "Patient Record: " + patientId;
                bool authorized = IsAuthorized(patientId);
            
                _log.Audit(authorized, QAuditAction.Update_CONTEXT, actionContext); 
                if (!authorized)
                {
                    throw new Exception("Unauthorized update to " + actionContext);
                }
            
                UpdateRecord(patientId);
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Login">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.ChangePassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.ForcedPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.RetryPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Create_CONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Read_CONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Update_CONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Delete_CONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Activate_CONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditAction.Deactivate_CONTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogAuditResult">
            <summary>
            Results for Audit logging.
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditResult.Grant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogAuditResult.Deny">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogCategory">
            <summary>
            Categories for use in EntLib LogEntry classes.
            </summary>
            
            <remarks>
            <para>ALL possible categories must be represented here so that they can be known
            for configuration in the App.config (via Enterprise Library Configuration application).</para>
            <para>All categories are set internally by the context in which SLogger is used.</para>
            </remarks>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Debug">
            <summary>
            {35A90EBF-F421-44A3-BE3A-47C72AFE47FE}
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Status">
            <summary>
            {35A90EBF-F421-44A3-BE3A-47C72AFE47FE}
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Verbose">
            <summary>
            {35A90EBF-F421-44A3-BE3A-47C72AFE47FE}
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Audit">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Grant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogCategory.Deny">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogEntry">
            <summary>
            The QLogEntry class is the log message created to pass off to EntLib for handling.
            There are some special Semio Logging Framework properties added to enhance logging.
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry.QloggerFullClass">
            <summary>
            Values for determining a useful code context.
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._loadedCodeContext">
            <summary>
            Flag determines if the code context has been loaded by EnsureCodeContext() for the Code Attributes.
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._trace">
            <summary>
            Stack trace loaded by EnsureStackTrace() for the EnsureCodeContext()
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._codeClass">
            <summary>
            Name of class
            </summary>
            <example>
            <code>
            Semio.Common.Logging.TestConsoleApp.Program
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._codeMethodSig">
            <summary>
            Full signature of method.
            </summary>
            <example>
            <code>
            void Main(System.String[])
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._codeMethod">
            <summary>
            Name of method
            </summary>
            <example>
            <code>
            Main
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._codeTopMethods">
            <summary>
            Top methods stack trace
            </summary>
            <example>
            <code>
            ComputeOne/ComputeAll/Go/Main
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._codeModule">
            <summary>
            Name of module (dll/exe).
            </summary>
            <example>
            <code>
            Semio.Common.Logging.TestConsoleApp.exe
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._codeLine">
            <summary>
            Line of code in source code.
            </summary>
            <example>
            <code>
            24
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._auditResult">
            <summary>
            Result for audit message.
            </summary>
            <example>
            <code>
            Grant
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._auditAction">
            <summary>
            Action for audit message.
            </summary>
            <example>
            <code>
            Update
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEntry._auditActionContext">
            <summary>
            Context for audit message.
            </summary>
            <example>
            <code>
            "Patient Record: 123"
            </code>
            </example>
        </member>
        <member name="M:Semio.Core.Loggers.Types.SLogEntry.#ctor">
            <summary>
            Noargs constructor.
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.Types.SLogEntry.SetAuditAttributes(Semio.Core.Loggers.Types.SLogAuditResult,Semio.Core.Loggers.Types.SLogAuditAction,System.String)">
            <summary>
            Set the Audit information.
            </summary>
            
            <remarks>
            <para>Set to an internal method to avoid others changing the Attribute
            values (which have no setters).</para>
            </remarks>
            
            <param name="result">QAuditResult</param>
            <param name="action">QAuditAction</param>
            <param name="actionContext">Very short description to provide context of what the action
            was preformed on</param>
        </member>
        <member name="M:Semio.Core.Loggers.Types.SLogEntry.EnsureStackTrace">
            <summary>
            Ensure a stack trace has been loaded.
            </summary>
            
            <remarks>
            <para>This will only be useful if all processing of this log entry occurs together, and then finishes.
            If this is called, and stack trace is established, control cannot return to the client before
            log completion or the stack trace would be invalid for subsequent calls.</para>
            </remarks>
        </member>
        <member name="M:Semio.Core.Loggers.Types.SLogEntry.EnsureCodeContext">
            <summary>
            Ensure a code context has been established.
            </summary>
            
            <remarks>
            <para>This will only be useful if all processing of this log entry occurs together, and then finishes.
            If this is called, and code context is established, control cannot return to the client before
            log completion or the code context would be invalid for subsequent calls.</para>
            <para>This is called by the Code* attributes which are used by the TextFormatter of a TraceListener,
            which is all within the original SLogger's method invocation, so the Code* attributes can rely
            on the ensured code context.</para>
            </remarks>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.User">
            <summary>
            Attribute for TextFormatter {property(User)}
            </summary>
            <example>
            <code>
            QAMR-ACCOUNTS\Q714211
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.CodeTopMethods">
            <summary>
            Top Methods stack trace.
            Attribute for TextFormatter {property(CodeTopMethods)}
            </summary>
            <example>
            <code>
            ComputeOne/ComputeAll/Go/Main
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.CodeMethod">
            <summary>
            Name of method.
            Attribute for TextFormatter {property(CodeMethod)}
            </summary>
            <example>
            <code>
            Main
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.CodeMethodSig">
            <summary>
            Full signature of method.
            Attribute for TextFormatter {property(CodeMethodSig)}
            </summary>
            <example>
            <code>
            void Main(System.String[])
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.CodeClass">
            <summary>
            Name of class.
            Attribute for TextFormatter {property(CodeClass)}
            </summary>
            <example>
            <code>
            Semio.Common.Logging.TestConsoleApp.Program
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.CodeModule">
            <summary>
            Name of module (dll/exe).
            Attribute for TextFormatter {property(CodeModule)}
            </summary>
            <example>
            <code>
            Semio.Common.Logging.TestConsoleApp.exe
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.CodeLine">
            <summary>
            Line of code in source code.
            Attribute for TextFormatter {property(CodeLine)}
            </summary>
            <example>
            <code>
            24
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.HttpUrl">
            <summary>
            Url of the current Http request.
            </summary>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.HttpMethod">
            <summary>
            Method of the current Http request.
            </summary>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.AuditResult">
            <summary>
            Result for audit message.
            Attribute for TextFormatter {property(AuditResult)}
            </summary>
            <example>
            <code>
            Grant
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.AuditAction">
            <summary>
            Action for audit message.
            Attribute for TextFormatter {property(AuditAction)}
            </summary>
            <example>
            <code>
            Update
            </code>
            </example>
        </member>
        <member name="P:Semio.Core.Loggers.Types.SLogEntry.AuditActionContext">
            <summary>
            Context for audit message.
            Attribute for TextFormatter {property(AuditActionContext)}
            </summary>
            <example>
            <code>
            "Patient Record: 123"
            </code>
            </example>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogEventId">
            <summary>
            This is a enumeration set of standard EventId values for use with SLogger Enum EventId parameters.
            </summary>
            
            <remarks>
            <para>This is used to provide an extensible standard for EventId values/ranges, as well as
            help the developer with Visual Studio IntelliSense.</para>
            
            <para>The developer may create any Enum values set for passing to SLogger as EventId, but this
            one provides some guidance on how to organize categories by high level, and how to provide
            more detail with custom subcategories.</para>
            <para>The SLogger methods that accept Enum EventId, also accept SLogEventId EventId so that
            Visual Studio will help lead the developer to established values via Intellisense. After the
            developer selects the SLogEventId prototype, they are presented with the values in this
            enum.</para>
            </remarks>
            
            <example>
            <code>
            public enum MyEventId
            {
                UIFormValidation = 3001,    // Note: SLogEventId.UserInterface = 3000
                UIContextExpired = 3002,
                DBRetry = 6001              // Note: SLogEventId.Database = 6000
            }
            
            [...]
            
                string actionContext = "Patient Record: " + patientId;
                
                _log.Information("Updating " + actionContext);
                try
                {
                    UpdateRecordAttempt(patientId);
                }
                catch (DataException ex)
                {
                    _log.Warning("Retrying update " + actionContext, MyEventId.DBRetry, ex);
                    try
                    {
                        UpdateRecordAttempt(patientId);
                        _log.Information("Updated " + actionContext);
                    }
                    catch (DataException ex2)
                    {
                        _log.Error("Failed to update " + actionContext, SLogEventId.Database, ex2);
                        throw;
                    }
                }
            </code>
            </example>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.General">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.BusinessLogic">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.UserInterface">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.Security">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.Network">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.Database">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.WebService">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.Environment">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogEventId.Other">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Loggers.SLogExeThreadContextDataMgr">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Loggers.SLogExeThreadContextDataMgr.SetCurrentSLogger(Semio.Core.Loggers.SLogger)">
            <summary>
            Save SLogger in CallContext ("not Logical" will prevent inheritance
            to new threads)
            </summary>
            <param name="slogger"></param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogExeThreadContextDataMgr.GetCurrentSLogger">
            <summary>
            Get the current logger from the current thread.
            </summary>
            <returns>Thread's current SLogger, or null if missing</returns>
        </member>
        <member name="M:Semio.Core.Loggers.SLogExeThreadContextDataMgr.SetData(System.String,System.String)">
            <summary>
            Sets the data.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Semio.Core.Loggers.SLogExeThreadContextDataMgr.GetData(System.String)">
            <summary>
            Gets the data.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogPriority">
            <summary>
            Priority for use in SLogger and QLogEntry classes in determining the "business importance"
            of a log message.
            </summary>
            
            <remarks>
            <para>The higher the number, the higher the priority.</para>
            <para>The Tracer class is hardcoded to a priority of 5, which needed to be accounted for
            (ie: considered a low priority)</para>
            <para>The Audit messages are very important to the business so they are high priority but
            actually have different severities</para>
            </remarks>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Deny">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Grant">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.DebugPoint">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Critical">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Warning">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Information">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.Verbose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogPriority.None">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Loggers.Types.SLogWebContextInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogWebContextInfo.HttpUserName">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogWebContextInfo.HttpUrl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Loggers.Types.SLogWebContextInfo.HttpMethod">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Helpers.OsHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.OsHelper.OpenApplication(System.String)">
            <summary>
            Launch the specified application in a normal window.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Semio.Core.Helpers.OsHelper.OpenApplication(System.String,System.String)">
            <summary>
            Launch the specified application in a normal window.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:Semio.Core.Helpers.OsHelper.OpenApplication(System.String,System.String,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            Launch the specified application.
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <param name="windowStyle"></param>
        </member>
        <member name="M:Semio.Core.Helpers.OsHelper.GetExePathForExtension(System.String)">
            <summary>
            Returns the path to the executable that the passed extension is associated with.
            </summary>
            <param name="strExtension">The extension in question (ex: "MPP")</param>
            <returns>The fully qualified path to the associated executable of an empty string
            if no association could be found.</returns>
        </member>
        <member name="T:Semio.Core.ProfilingMetric">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.ProfilingMetric._idCounter">
            <summary>
            Global counter for query ids. Starts at 0 (incremented on first use)
            </summary>
        </member>
        <member name="M:Semio.Core.ProfilingMetric.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.ProfilingMetric"/> class.
            </summary>
        </member>
        <member name="M:Semio.Core.ProfilingMetric.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Semio.Core.ProfilingMetric"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Semio.Core.ProfilingMetric.LogEnd">
            <summary>
            Logs the end.
            </summary>
        </member>
        <member name="M:Semio.Core.ProfilingMetric.TimingString(System.DateTime,System.DateTime)">
            <summary>
            Create string version of time between provided start and end.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.ProfilingMetric.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Semio.Core.ProfilingMetric.EndDetails">
            <summary>
            Gets the end details.
            </summary>
            <value>The end details.</value>
        </member>
        <member name="P:Semio.Core.ProfilingMetric.Id">
            <summary>
            Gets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Semio.Core.ProfilingMetric.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Semio.Core.ProfilingMetric.Time">
            <summary>
            Gets the time.
            </summary>
            <value>The time.</value>
        </member>
        <member name="T:Semio.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Semio.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Semio.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Semio.Core.Properties.Resources.NotApplicable">
            <summary>
              Looks up a localized string similar to Not applicable.
            </summary>
        </member>
        <member name="T:Semio.Core.Helpers.ReflectionHelper">
            <summary>
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.ReflectionHelper.CreateInstance(System.Reflection.Assembly,System.String,Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
             Create an instance, calling the constructor with the most parameters
             that can be resovled with the <paramref name="container"/>.
             If no value can be determined for a constructor parameter, the
             constructor is not used.
            </summary>
            <param name="assembly"></param>
            <param name="typeName"></param>
            <param name="container"></param>
            <returns>Instance of requested object</returns>
        </member>
        <member name="M:Semio.Core.Helpers.ReflectionHelper.Evaluate(System.Object,System.String)">
            <summary>
            Evaluate an expression using the specified context.
            For example, given an object with a Candidate property, the following expressions forms are supported:
                Candidate.DesignDescription.Text
                Candidate.FindNode("Timeline").Content.Milestones[0].MilestoneDate
                Candidate.FindNode("Timeline").Content.Milestones.Where("MilestoneName = @0", "PA").First().MilestoneDate
            </summary>
            <param name="context">The object instance/</param>
            <param name="expression">The property or method to evaluate.</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.ReflectionHelper.ValueByReflection(System.Object,System.String)">
            <summary>
            Get the object value from the object, as notated in the omNotation.
            </summary>
            <param name="obj"></param>
            <param name="omNotation">Object model notation, ex: ".Authors[0].Name", ex: ".Keys[\"Name\"].ToCharArray()[2]"</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.ReflectionHelper.EvaluateIndexer(System.Object,System.String)">
            <summary>
            Evaluate an indexer 
            </summary>
            <param name="context">The object instance.</param>
            <param name="token">The expression to evaluate.  Example:  [0] or ["Key"]</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.ReflectionHelper.EvaluateMethod(System.Object,System.String)">
            <summary>
            Evaluate a method
            </summary>
            <param name="context">The object instance.</param>
            <param name="token">The expression to evaluate.  Example:  MethodName(Parameter1, "Parameter2")</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.ReflectionHelper.EvaluateProperty(System.Object,System.String)">
            <summary>
            Evaluate a property
            </summary>
            <param name="context">The object instance.</param>
            <param name="token">The property name.</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Helpers.RegistryHelper">
            <summary>
            Helper class for working with the Registry
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.Boolean)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="key">Example:  EnableDeveloperMode</param>
            <param name="defaultValue">Example:  false</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  EnableDeveloperMode</param>
            <param name="defaultValue">Example:  false</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  EnableDeveloperMode</param>
            <param name="defaultValue">Example:  false</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  EnableDeveloperMode</param>
            <param name="defaultValue">Example:  false</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.Double)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.Double)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.Double)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.String,System.Double)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.Int32)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.Int32)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  WindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="configuration">Example: DEV</param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="configuration">Example: DEV</param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetCurrentUserValue(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Returns the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="defaultValue">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.SetCurrentUserValue(System.String,System.Object)">
            <summary>
            Sets the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="value">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.SetCurrentUserValue(System.String,System.String,System.String,System.Object)">
            <summary>
            Sets the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="value">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.SetCurrentUserValue(System.String,System.String,System.Object)">
            <summary>
            Sets the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="value">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.SetCurrentUserValue(System.String,System.String,System.String,System.String,System.Object)">
            <summary>
            Sets the value of HKEY_CURRENT_USER\Software\&lt;vendorName&gt;\&lt;applicationName&gt;\&lt;key&gt;.
            </summary>
            <param name="vendorName">Example:  Semio</param>
            <param name="applicationName">Example:  ClinWeb</param>
            <param name="configuration">Example: DEV</param>
            <param name="key">Example:  ShellWindowWidth</param>
            <param name="value">Example:  1280</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetLocalMachineValue(System.String,System.String,System.String)">
            <summary>
            Returns the value of the specified HKEY_LOCAL_MACHINE key and value, or defaultValue if the key or value do not exist, cast to string.
            </summary>
            <param name="keyName">Example:  @"SOFTWARE\Classes\InfoPath.Document.2\shell\Open\command"</param>
            <param name="valueName">Example: ""</param>
            <param name="defaultValue">Example:  ""</param>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.Helpers.RegistryHelper.GetLocalMachineValue(System.String,System.String,System.Object)">
            <summary>
            Returns the value of the specified HKEY_LOCAL_MACHINE key and value, or defaultValue if the key or value do not exist, cast to object.
            </summary>
            <param name="keyName">Example:  @"SOFTWARE\Classes\InfoPath.Document.2\shell\Open\command"</param>
            <param name="valueName">Example: ""</param>
            <param name="defaultValue">Example:  ""</param>
            <returns></returns>
        </member>
        <member name="T:Semio.Core.Subject.Subject">
            <summary>
            A class representing a Semio data set.
            </summary>
            <remarks>
            The name of the class temporarily remains Subject for backwards compatibility and is expected to be updated to SemioDataSet.
            </remarks>
        </member>
        <member name="P:Semio.Core.Subject.Subject.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Semio.Core.Subject.Subject.Indication">
            <summary>
            Gets or sets the indication.
            </summary>
        </member>
        <member name="P:Semio.Core.Subject.Subject.FormattedIndicationAndId">
            <summary>
            Gets the Indication and Id with the format "Indication (Id)"
            </summary>
        </member>
        <member name="P:Semio.Core.Subject.Subject.Team">
            <summary>
            Gets or sets the team.
            </summary>
        </member>
        <member name="P:Semio.Core.Subject.Subject.DateCreated">
            <summary>
            Gets or sets the date created.
            </summary>
        </member>
        <member name="P:Semio.Core.Subject.Subject.Summary">
            <summary>
            Gets the summary.
            </summary>
            <remarks>
            This field temporarily exists for backwards compatibility and is expected to be removed.
            </remarks>
        </member>
        <member name="P:Semio.Core.Subject.Subject.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Semio.Core.Subject.SubjectEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Subject.SubjectEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Semio.Core.Subject.SubjectEventArgs.SubjectEventType">
            <summary>
            Gets or sets the type of the subject event.
            </summary>
            <value>The type of the subject event.</value>
        </member>
        <member name="P:Semio.Core.Subject.SubjectEventArgs.SubjectId">
            <summary>
            Gets or sets the subject id.
            </summary>
            <value>The subject id.</value>
        </member>
        <member name="P:Semio.Core.Subject.SubjectEventArgs.SelectedSubject">
            <summary>
            Gets or sets the selected subject.
            </summary>
            <value>The selected subject.</value>
        </member>
        <member name="T:Semio.Core.Subject.SubjectEventType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Subject.SubjectEventType.NotAssigned">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Subject.SubjectEventType.Global">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.Subject.SubjectEventType.Local">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.ThreadContext">
            <summary>
                Provides access to a single thread context on a per request basis.
                For Client applications, the thread context is stored in a named slot in the thread.
            
                The key is <see cref="F:Semio.Core.ThreadContext.ThreadKey"/>.
            </summary>
        </member>
        <member name="F:Semio.Core.ThreadContext.ThreadKey">
            <summary>
            Key that is used for storing the thread context
            </summary>
        </member>
        <member name="M:Semio.Core.ThreadContext.Open">
            <summary>
            Opens this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Semio.Core.ThreadContext.GetCurrent(System.Boolean)">
            Returns the current context, automatically creating it
            if <param name="autoCreate"/> is true.  
        </member>
        <member name="M:Semio.Core.ThreadContext.CloseCurrent">
            <summary>
            If there is a current context, close it and remove it from the context.
            </summary>
        </member>
        <member name="P:Semio.Core.ThreadContext.ClientContext">
            <summary>
            Returns a thread-local thread context.
            
            Does not auto-create the context.  See <see cref="P:Semio.Core.ThreadContext.Current"/> for that.
            </summary>
        </member>
        <member name="P:Semio.Core.ThreadContext.Current">
             <summary>
            Convenience property, although this is the most commonly used property in this class.
             </summary>
        </member>
        <member name="P:Semio.Core.ThreadContext.IsCurrentOpen">
            <summary>
            Checks whether there is a current context open
            </summary>
        </member>
        <member name="T:Semio.Core.TokResolver">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.TokResolver.TokRegex">
            <summary>
            For finding tokens embedded in the string (for Resolve())
            </summary>
        </member>
        <member name="M:Semio.Core.TokResolver.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Semio.Core.TokResolver.GetToks(System.String)">
            <summary>
            Get list of tokens found in the provided string
            </summary>
            <returns>All {} strings without the '{' and '}' surround characters.</returns>
        </member>
        <member name="M:Semio.Core.TokResolver.Resolve">
            <summary>
            Resolve all tokens in sql string to values from passed dictionary.
            </summary>
            <returns>Provided sql with all tokens resolved.</returns>
            <exception cref="T:System.NotImplementedException">When a token is found with no associated dictionary entry.</exception>
        </member>
        <member name="M:Semio.Core.TokResolver.Resolve(Semio.Core.ResolveOrphanToks)">
            <summary>
            Resolve all tokens in sql string to values from passed dictionary.
            </summary>
            <param name="orphanToks">What to do when dict is missing the key for a token.</param>
            <returns>Provided sql with all tokens resolved.</returns>
            <exception cref="T:System.NotImplementedException">(if orphanToks = ResolveSqlOrphanToks.Error) when a token is found with no associated dictionary entry.</exception>
        </member>
        <member name="M:Semio.Core.TokResolver.ToString(Semio.Core.ResolveOrphanToks)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="orphanToks">The orphan toks.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Semio.Core.TokResolver.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Semio.Core.TokResolver.HasToken(System.String,System.String)">
            <summary>
            Determine whether the provided sql contains the passed token key.
            </summary>
            <param name="str"></param>
            <param name="key"></param>
            <returns>True if "{"+key+"}" is inside sql, false otherwise.</returns>
        </member>
        <member name="M:Semio.Core.TokResolver.HasAnyTokens(System.String)">
            <summary>
            Determine if any unresolved tokens exist in the passed sql.
            </summary>
            <param name="str"></param>
            <returns>True if a "{Token}" type string is found.</returns>
        </member>
        <member name="P:Semio.Core.TokResolver.Str">
            <summary>
            Gets or sets the STR.
            </summary>
            <value>The STR.</value>
        </member>
        <member name="P:Semio.Core.TokResolver.Dict">
            Dictionary with key value pairs such as dict["SubjectId"] = 1
        </member>
        <member name="T:Semio.Core.ResolveOrphanToks">
            <summary>
            Parameter for Resolve()
            </summary>
        </member>
        <member name="F:Semio.Core.ResolveOrphanToks.Error">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.ResolveOrphanToks.Leave">
            <summary>
            
            </summary>
        </member>
        <member name="F:Semio.Core.ResolveOrphanToks.Remove">
            <summary>
            
            </summary>
        </member>
        <member name="T:Semio.Core.Helpers.UriHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Semio.Core.Helpers.UriHelper.FixupLocalhost(System.String)">
            <summary>
            Add a dot after "localhost" if found.
            </summary>
            <remarks>
            Urls such as http://localhost:8000/Service.svc are not intercepted by the Fiddler debugging tool.
            By changing the url to http://localhost.:8000/Service.svc, the url will still work, but Fiddler will
            be able to intercept it, thus producing vast amounts of goodness.
            </remarks>
            <param name="url"></param>
            <returns>Url with a dot after "localhost" if found.</returns>
        </member>
    </members>
</doc>
